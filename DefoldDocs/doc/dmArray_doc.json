{
  "info": {
    "group": "DEFOLD SDK", 
    "description": "Templatized array with bounds checking.\nThe backing storage is either auto-allocated (dynamically allocated) or user-allocated (supplied by user).\nWith exception of changing the size and capacity, all operations are guaranteed to be O(1).\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">dmArray</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n</pre></div>", 
    "namespace": "dmArray", 
    "brief": "Templatized array", 
    "file": "dmsdk/dlib/array.h", 
    "path": "engine/dlib/src/dmsdk/dlib/array.h", 
    "name": "Array"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "get number of elements in C array", 
      "parameters": [
        {
          "doc": "[type:]", 
          "name": "Array", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "of elements", 
          "name": "Number", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "get number of elements in C array", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MACRO", 
      "name": "DM_ARRAY_SIZE"
    }, 
    {
      "replaces": "", 
      "description": "The backing storage is either auto-allocated (dynamically allocated) or user-allocated (supplied by user).\nWith exception of changing the size and capacity, all operations are guaranteed to be O(1).", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Templatized array with bounds checking.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [
        {
          "doc": "Contained type, must obey memcpy semantics", 
          "type": "typename T", 
          "name": "T"
        }
      ], 
      "type": "CLASS", 
      "name": "dmArray"
    }, 
    {
      "replaces": "", 
      "description": "constructor. empty auto-allocated memory", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "constructor. empty auto-allocated memory", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">dmArray</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmArray"
    }, 
    {
      "replaces": "", 
      "description": "user-allocated array with initial size and capacity", 
      "parameters": [
        {
          "doc": "User-allocated array to be used as storage.", 
          "name": "user_array", 
          "types": [
            "T*"
          ]
        }, 
        {
          "doc": "Initial size", 
          "name": "size", 
          "types": [
            "uint32_t"
          ]
        }, 
        {
          "doc": "Initial capacity", 
          "name": "capacity", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "constructor. user-allocated memory", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmArray"
    }, 
    {
      "replaces": "", 
      "description": "Only frees memory when auto-allocated.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "array destructor", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "~dmArray"
    }, 
    {
      "replaces": "", 
      "description": "Pointer to the start of the backing storage", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "pointer to start of memory", 
          "name": "pointer", 
          "types": [
            "T*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array begin", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Begin"
    }, 
    {
      "replaces": "", 
      "description": "Pointer to the end of the backing storage\nThe end is essentially outside of the used storage.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "pointer to end of memory", 
          "name": "pointer", 
          "types": [
            "T*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array end", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "End"
    }, 
    {
      "replaces": "", 
      "description": "First element of the array", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "reference to the first element", 
          "name": "reference", 
          "types": [
            "T&"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array front", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Front"
    }, 
    {
      "replaces": "", 
      "description": "First element of the array (const)", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "const-reference to the first element", 
          "name": "reference", 
          "types": [
            "const T&"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array front (const)", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Front"
    }, 
    {
      "replaces": "", 
      "description": "Last element of the array", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "reference to the last element", 
          "name": "reference", 
          "types": [
            "T&"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Back"
    }, 
    {
      "replaces": "", 
      "description": "Last element of the array (const)", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "const-reference to the last element", 
          "name": "reference", 
          "types": [
            "const T&"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array back (const)", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Back"
    }, 
    {
      "replaces": "", 
      "description": "Size of the array in elements", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "array size", 
          "name": "number", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "notes": [], 
      "brief": "size of array", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Size"
    }, 
    {
      "replaces": "", 
      "description": "Capacity is currently allocated storage.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "array capacity", 
          "name": "number", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "notes": [], 
      "brief": "capacity of array", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Capacity"
    }, 
    {
      "replaces": "", 
      "description": "Check if the array is full.\nThe array is full when the size is equal to the capacity.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "true if the array is full", 
          "name": "boolean", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array full", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Full"
    }, 
    {
      "replaces": "", 
      "description": "Check if the array is empty.\nThe array is empty when the size is zero.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "true if the array is empty", 
          "name": "boolean", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array empty", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Empty"
    }, 
    {
      "replaces": "", 
      "description": "Amount of additional elements that can be stored", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "amount of additional elements that can be stored", 
          "name": "number", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "notes": [], 
      "brief": "remaining size of array", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Remaining"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve an element by index", 
      "parameters": [
        {
          "doc": "array index", 
          "name": "index", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "reference to the element at the specified index", 
          "name": "reference", 
          "types": [
            "T&"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array operator[]", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "operator[]"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve an element by index (const)", 
      "parameters": [
        {
          "doc": "array index", 
          "name": "index", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "const-reference to the element at the specified index", 
          "name": "reference", 
          "types": [
            "const T&"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array operator[] (const)", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "operator[]"
    }, 
    {
      "replaces": "", 
      "description": "Set the capacity of the array.\nIf the size is less than the capacity, the array is truncated.\nIf it is larger, the array is extended.\nOnly allowed for auto-allocated arrays and will result in a new dynamic allocation followed by memcpy of the elements.", 
      "parameters": [
        {
          "doc": "capacity of the array", 
          "name": "capacity", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "array set capacity", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetCapacity"
    }, 
    {
      "replaces": "", 
      "description": "Relative change of capacity\nEquivalent to SetCapacity(Capacity() + offset).\nOnly allowed for auto-allocated arrays and will result in a new dynamic allocation followed by memcpy of the elements.", 
      "parameters": [
        {
          "doc": "relative amount of elements to change the capacity", 
          "name": "offset", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "array offset capacity", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "OffsetCapacity"
    }, 
    {
      "replaces": "", 
      "description": "Set size of the array", 
      "parameters": [
        {
          "doc": "size of the array, must be less or equal to the capacity", 
          "name": "size", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "array set size", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetSize"
    }, 
    {
      "replaces": "", 
      "description": "Remove the element at the specified index.\nThe removed element is replaced by the element at the end (if any), thus potentially altering the order.\nWhile operation changes the array size, it is guaranteed to be O(1).", 
      "parameters": [
        {
          "doc": "index of the element to remove", 
          "name": "index", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "reference to the new element at index", 
          "name": "reference", 
          "types": [
            "T&"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array eraseswap", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "EraseSwap"
    }, 
    {
      "replaces": "", 
      "description": "Remove the element by reference\nThe removed element is replaced by the element at the end (if any), thus potentially altering the order.\nWhile operation changes the array size, it is guaranteed to be O(1).", 
      "parameters": [
        {
          "doc": "reference to the element to remove.", 
          "name": "element", 
          "types": [
            "T&"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "reference to the new referenced element", 
          "name": "reference", 
          "types": [
            "T&"
          ]
        }
      ], 
      "notes": [], 
      "brief": "array reference eraseswap", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "EraseSwapRef"
    }, 
    {
      "replaces": "", 
      "description": "Add an element to the end of the array\nOnly allowed when the capacity is larger than size.", 
      "parameters": [
        {
          "doc": "element element to add", 
          "name": "element", 
          "types": [
            "const T&"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "array push", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Push"
    }, 
    {
      "replaces": "", 
      "description": "Add an array of elements to the end of the array\nOnly allowed when the capacity is larger than size + count", 
      "parameters": [
        {
          "doc": "array of elements to add", 
          "name": "array", 
          "types": [
            "const T&"
          ]
        }, 
        {
          "doc": "amount of elements in the array", 
          "name": "count", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "array push array", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "PushArray"
    }, 
    {
      "replaces": "", 
      "description": "Remove the last element of the array\nOnly allowed when the size is larger than zero.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "array pop", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Pop"
    }, 
    {
      "replaces": "", 
      "description": "Swap the content of two arrays", 
      "parameters": [
        {
          "doc": "reference to array to swap content with", 
          "name": "rhs", 
          "types": [
            "dmArray`<T>`&"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "array swap", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Swap"
    }, 
    {
      "replaces": "", 
      "description": "map a function on all values", 
      "parameters": [
        {
          "doc": "function that will be called for each element", 
          "name": "fn", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "user defined context that will be passed in with each callback", 
          "name": "ctx", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "map a function on all values", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Map"
    }
  ]
}