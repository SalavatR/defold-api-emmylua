{
  "info": {
    "description": "<p><span class=\"file\">&lt;dmsdk/dlib/dstrings.h&gt;</span></p>\n<p>String functions.</p>", 
    "namespace": "dmStringFunc", 
    "name": "DStrings", 
    "brief": "<p>SDK Defold String Utils API documentation</p>"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "<p>Size-bounded string formating. Resulting string is guaranteed to be 0-terminated.</p>", 
      "parameters": [
        {
          "doc": "<p>Buffer to write to</p>", 
          "name": "buffer"
        }, 
        {
          "doc": "<p>Size of the buffer</p>", 
          "name": "count"
        }, 
        {
          "doc": "<p>String format</p>", 
          "name": "format"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p>of the resulting string (excl terminating 0) if it fits, -1 otherwise</p>", 
          "name": "Size"
        }
      ], 
      "brief": "<p>Size-bounded string formating.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">char</span> <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">];</span>\n<span class=\"n\">dmSnPrintf</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">PATH_FORMAT</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">);</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmSnPrintf"
    }, 
    {
      "replaces": "", 
      "description": "<p>Case-insensitive string comparison</p>", 
      "parameters": [
        {
          "doc": "<p>First string to compare</p>", 
          "name": "s1"
        }, 
        {
          "doc": "<p>Second string to compare</p>", 
          "name": "s2"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p>integer greater than, equal to, or less than 0 after lexicographically comparison of s1 and s2</p>", 
          "name": "an"
        }
      ], 
      "brief": "<p>Case-insensitive string comparison</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">dmStrCaseCmp</span><span class=\"p\">(</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;b&quot;</span><span class=\"p\">);</span> <span class=\"c1\">// &lt;0</span>\n<span class=\"n\">dmStrCaseCmp</span><span class=\"p\">(</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;a&quot;</span><span class=\"p\">);</span> <span class=\"c1\">// &gt;0</span>\n<span class=\"n\">dmStrCaseCmp</span><span class=\"p\">(</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;a&quot;</span><span class=\"p\">);</span> <span class=\"c1\">// 0</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmStrCaseCmp"
    }, 
    {
      "replaces": "", 
      "description": "<p>Tokenize strings. Equivalent to BSD strsep_r. Thread-save version of strtok.</p>", 
      "parameters": [
        {
          "doc": "<p>Pointer to string. For the first call string is the string to tokenize. Subsequent should pass NULL.</p>", 
          "name": "string"
        }, 
        {
          "doc": "<p>Delimiter string</p>", 
          "name": "delim"
        }, 
        {
          "doc": "<p>Internal state pointer</p>", 
          "name": "lasts"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p>call to dmStrTok() returns a pointer to a null-terminated string containing the next token. This string does not include the delimiting byte. If no more tokens are found, dmStrTok() returns NULL</p>", 
          "name": "Each"
        }
      ], 
      "brief": "<p>Tokenize strings.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">strdup</span><span class=\"p\">(</span><span class=\"s\">&quot;a b c&quot;</span><span class=\"p\">);</span>\n<span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">last</span><span class=\"p\">;</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">dmStrTok</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"s\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">last</span><span class=\"p\">);</span> <span class=\"c1\">// a</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">dmStrTok</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">last</span><span class=\"p\">);</span> <span class=\"c1\">// b</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">dmStrTok</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">last</span><span class=\"p\">);</span> <span class=\"c1\">// c</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmStrTok"
    }, 
    {
      "replaces": "", 
      "description": "<p>Size-bounded string concatenation. Same as OpenBSD 2.4 <a href=\"http://www.manpagez.com/man/3/strlcat\">strlcat</a>.\nAppends src to string dst of size siz (unlike strncat, siz is the full size of dst, not space left).\nAt most siz-1 characters will be copied.  Always NUL terminates (unless siz == 0).\nReturns strlen(src); if retval &gt;= siz, truncation occurred.</p>", 
      "parameters": [
        {
          "doc": "<p>Destination string</p>", 
          "name": "dst"
        }, 
        {
          "doc": "<p>Source string</p>", 
          "name": "src"
        }, 
        {
          "doc": "<p>Max size</p>", 
          "name": "size"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p>length of the created string</p>", 
          "name": "Total"
        }
      ], 
      "brief": "<p>Size-bounded string concatenation.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span> <span class=\"n\">dst</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n<span class=\"n\">dmStrlCat</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">));</span> <span class=\"c1\">// dst = &quot;fo&quot;</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmStrlCat"
    }, 
    {
      "replaces": "", 
      "description": "<p>Size-bounded string copying. Same as OpenBSD 2.4 <a href=\"http://www.manpagez.com/man/3/strlcpy/\">strlcpy</a>.\nCopy src to string dst of size siz.  At most siz-1 characters will be copied.\nAlways NUL terminates (unless siz == 0).Returns strlen(src); if retval &gt;= siz, truncation occurred.</p>", 
      "parameters": [
        {
          "doc": "<p>Destination string</p>", 
          "name": "dst"
        }, 
        {
          "doc": "<p>Source string</p>", 
          "name": "src"
        }, 
        {
          "doc": "<p>Max size</p>", 
          "name": "size"
        }
      ], 
      "returnvalues": [
        {
          "doc": "<p>length of the created string</p>", 
          "name": "Total"
        }
      ], 
      "brief": "<p>Size-bounded string copying.</p>", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span> <span class=\"n\">dst</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"n\">dmStrlCpy</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">));</span> <span class=\"c1\">// dst = &quot;fo&quot;</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "type": "FUNCTION", 
      "name": "dmStrlCpy"
    }
  ]
}