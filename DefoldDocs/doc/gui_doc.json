{
  "info": {
    "group": "SYSTEM", 
    "description": "GUI API documentation", 
    "namespace": "gui", 
    "brief": "GUI API documentation", 
    "file": "", 
    "path": "", 
    "name": "GUI"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "The material used when rendering the gui. The type of the property is hash.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "<span class=\"type\">hash</span> gui material", 
      "examples": "How to set material using a script property (see <a href=\"/ref/resource#resource.material\">resource.material</a>)\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_material&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">material</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/material.material&quot;</span><span class=\"p\">))</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">material&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_material</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "PROPERTY", 
      "name": "material"
    }, 
    {
      "replaces": "", 
      "description": "Retrieves the node with the specified id.", 
      "parameters": [
        {
          "doc": "id of the node to retrieve", 
          "name": "id", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a new node instance", 
          "name": "instance", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node with the specified id", 
      "examples": "Gets a node by id and change its color:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">red</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_node"
    }, 
    {
      "replaces": "", 
      "description": "Retrieves the id of the specified node.", 
      "parameters": [
        {
          "doc": "the node to retrieve the id from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the id of the node", 
          "name": "id", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the id of the specified node", 
      "examples": "Gets the id of a node:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_node&quot;</span><span class=\"p\">)</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; hash: [my_node]</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_id"
    }, 
    {
      "replaces": "", 
      "description": "Set the id of the specicied node to a new value.\nNodes created with the gui.new_*_node() functions get\nan empty id. This function allows you to give dynamically\ncreated nodes an id.\n<span class=\"icon-attention\"></span> No checking is done on the uniqueness of supplied ids.\nIt is up to you to make sure you use unique ids.", 
      "parameters": [
        {
          "doc": "node to set the id for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "id to set", 
          "name": "id", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the id of the specified node", 
      "examples": "Create a new node and set its id:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_id</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">my_new_node&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_id"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve the index of the specified node.\nThe index defines the order in which a node appear in a GUI scene.\nHigher index means the node is drawn on top of lower indexed nodes.", 
      "parameters": [
        {
          "doc": "the node to retrieve the id from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the index of the node", 
          "name": "index", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the index of the specified node", 
      "examples": "Compare the index order of two nodes:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">node1</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_node_1&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node2</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_node_2&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_index</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_index</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- node1 is drawn below node2</span>\n<span class=\"k\">else</span>\n    <span class=\"c1\">-- node2 is drawn below node1</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_index"
    }, 
    {
      "replaces": "", 
      "description": "Deletes the specified node. Any child nodes of the specified node will be\nrecursively deleted.", 
      "parameters": [
        {
          "doc": "node to delete", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "deletes a node", 
      "examples": "Delete a particular node and any child nodes it might have:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">delete_node</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.delete_node"
    }, 
    {
      "replaces": "", 
      "description": "once forward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "once forward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PLAYBACK_ONCE_FORWARD"
    }, 
    {
      "replaces": "", 
      "description": "once backward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "once backward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PLAYBACK_ONCE_BACKWARD"
    }, 
    {
      "replaces": "", 
      "description": "once forward and then backward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "once forward and then backward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PLAYBACK_ONCE_PINGPONG"
    }, 
    {
      "replaces": "", 
      "description": "loop forward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "loop forward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PLAYBACK_LOOP_FORWARD"
    }, 
    {
      "replaces": "", 
      "description": "loop backward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "loop backward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PLAYBACK_LOOP_BACKWARD"
    }, 
    {
      "replaces": "", 
      "description": "ping pong loop", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "ping pong loop", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PLAYBACK_LOOP_PINGPONG"
    }, 
    {
      "replaces": "", 
      "description": "linear interpolation", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "linear interpolation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_LINEAR"
    }, 
    {
      "replaces": "", 
      "description": "in-quadratic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-quadratic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INQUAD"
    }, 
    {
      "replaces": "", 
      "description": "out-quadratic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-quadratic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTQUAD"
    }, 
    {
      "replaces": "", 
      "description": "in-out-quadratic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-quadratic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTQUAD"
    }, 
    {
      "replaces": "", 
      "description": "out-in-quadratic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-quadratic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINQUAD"
    }, 
    {
      "replaces": "", 
      "description": "in-cubic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-cubic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INCUBIC"
    }, 
    {
      "replaces": "", 
      "description": "out-cubic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-cubic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTCUBIC"
    }, 
    {
      "replaces": "", 
      "description": "in-out-cubic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-cubic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTCUBIC"
    }, 
    {
      "replaces": "", 
      "description": "out-in-cubic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-cubic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINCUBIC"
    }, 
    {
      "replaces": "", 
      "description": "in-quartic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-quartic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INQUART"
    }, 
    {
      "replaces": "", 
      "description": "out-quartic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-quartic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTQUART"
    }, 
    {
      "replaces": "", 
      "description": "in-out-quartic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-quartic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTQUART"
    }, 
    {
      "replaces": "", 
      "description": "out-in-quartic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-quartic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINQUART"
    }, 
    {
      "replaces": "", 
      "description": "in-quintic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-quintic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INQUINT"
    }, 
    {
      "replaces": "", 
      "description": "out-quintic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-quintic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTQUINT"
    }, 
    {
      "replaces": "", 
      "description": "in-out-quintic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-quintic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTQUINT"
    }, 
    {
      "replaces": "", 
      "description": "out-in-quintic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-quintic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINQUINT"
    }, 
    {
      "replaces": "", 
      "description": "in-sine", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-sine", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INSINE"
    }, 
    {
      "replaces": "", 
      "description": "out-sine", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-sine", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTSINE"
    }, 
    {
      "replaces": "", 
      "description": "in-out-sine", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-sine", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTSINE"
    }, 
    {
      "replaces": "", 
      "description": "out-in-sine", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-sine", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINSINE"
    }, 
    {
      "replaces": "", 
      "description": "in-exponential", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-exponential", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INEXPO"
    }, 
    {
      "replaces": "", 
      "description": "out-exponential", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-exponential", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTEXPO"
    }, 
    {
      "replaces": "", 
      "description": "in-out-exponential", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-exponential", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTEXPO"
    }, 
    {
      "replaces": "", 
      "description": "out-in-exponential", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-exponential", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINEXPO"
    }, 
    {
      "replaces": "", 
      "description": "in-circlic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-circlic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INCIRC"
    }, 
    {
      "replaces": "", 
      "description": "out-circlic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-circlic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTCIRC"
    }, 
    {
      "replaces": "", 
      "description": "in-out-circlic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-circlic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTCIRC"
    }, 
    {
      "replaces": "", 
      "description": "out-in-circlic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-circlic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINCIRC"
    }, 
    {
      "replaces": "", 
      "description": "in-elastic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-elastic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INELASTIC"
    }, 
    {
      "replaces": "", 
      "description": "out-elastic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-elastic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTELASTIC"
    }, 
    {
      "replaces": "", 
      "description": "in-out-elastic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-elastic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTELASTIC"
    }, 
    {
      "replaces": "", 
      "description": "out-in-elastic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-elastic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINELASTIC"
    }, 
    {
      "replaces": "", 
      "description": "in-back", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INBACK"
    }, 
    {
      "replaces": "", 
      "description": "out-back", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTBACK"
    }, 
    {
      "replaces": "", 
      "description": "in-out-back", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTBACK"
    }, 
    {
      "replaces": "", 
      "description": "out-in-back", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINBACK"
    }, 
    {
      "replaces": "", 
      "description": "in-bounce", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-bounce", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INBOUNCE"
    }, 
    {
      "replaces": "", 
      "description": "out-bounce", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-bounce", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTBOUNCE"
    }, 
    {
      "replaces": "", 
      "description": "in-out-bounce", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-bounce", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_INOUTBOUNCE"
    }, 
    {
      "replaces": "", 
      "description": "out-in-bounce", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-bounce", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.EASING_OUTINBOUNCE"
    }, 
    {
      "replaces": "", 
      "description": "This starts an animation of a node property according to the specified parameters.\nIf the node property is already being animated, that animation will be canceled and\nreplaced by the new one. Note however that several different node properties\ncan be animated simultaneously. Use <code>gui.cancel_animation</code> to stop the animation\nbefore it has completed.\nComposite properties of type vector3, vector4 or quaternion\nalso expose their sub-components (x, y, z and w).\nYou can address the components individually by suffixing the name with a dot '.'\nand the name of the component.\nFor instance, <code>\"position.x\"</code> (the position x coordinate) or <code>\"color.w\"</code>\n(the color alpha value).\nIf a <code>complete_function</code> (Lua function) is specified, that function will be called\nwhen the animation has completed.\nBy starting a new animation in that function, several animations can be sequenced\ntogether. See the examples below for more information.", 
      "parameters": [
        {
          "doc": "node to animate", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "property to animate\n<ul>\n<li><code>\"position\"</code></li>\n<li><code>\"rotation\"</code></li>\n<li><code>\"scale\"</code></li>\n<li><code>\"color\"</code></li>\n<li><code>\"outline\"</code></li>\n<li><code>\"shadow\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"fill_angle\"</code> (pie)</li>\n<li><code>\"inner_radius\"</code> (pie)</li>\n<li><code>\"slice9\"</code> (slice9)</li>\n</ul>\nThe following property constants are defined equaling the corresponding property string names.\n<ul>\n<li><code>gui.PROP_POSITION</code></li>\n<li><code>gui.PROP_ROTATION</code></li>\n<li><code>gui.PROP_SCALE</code></li>\n<li><code>gui.PROP_COLOR</code></li>\n<li><code>gui.PROP_OUTLINE</code></li>\n<li><code>gui.PROP_SHADOW</code></li>\n<li><code>gui.PROP_SIZE</code></li>\n<li><code>gui.PROP_FILL_ANGLE</code></li>\n<li><code>gui.PROP_INNER_RADIUS</code></li>\n<li><code>gui.PROP_SLICE9</code></li>\n</ul>", 
          "name": "property", 
          "types": [
            "string", 
            "constant"
          ]
        }, 
        {
          "doc": "target property value", 
          "name": "to", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }, 
        {
          "doc": "easing to use during animation.\n     Either specify one of the <code>gui.EASING_*</code> constants or provide a\n     <span class=\"type\">vector</span> with a custom curve. See the <a href=\"/manuals/animation#_easing\">animation guide</a> for more information.", 
          "name": "easing", 
          "types": [
            "constant", 
            "vector"
          ]
        }, 
        {
          "doc": "duration of the animation in seconds.", 
          "name": "duration", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "delay before the animation starts in seconds.", 
          "name": "[delay]", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "function to call when the\n     animation has completed", 
          "name": "[complete_function]", 
          "types": [
            "function(self, node)"
          ]
        }, 
        {
          "doc": "playback mode\n<ul>\n<li><code>gui.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>gui.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>gui.PLAYBACK_ONCE_PINGPONG</code></li>\n<li><code>gui.PLAYBACK_LOOP_FORWARD</code></li>\n<li><code>gui.PLAYBACK_LOOP_BACKWARD</code></li>\n<li><code>gui.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>", 
          "name": "[playback]", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "animates a node property", 
      "examples": "How to start a simple color animation, where the node fades in to white during 0.5 seconds:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"c1\">-- node is fully transparent</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_INOUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"c1\">-- start animation</span>\n</pre></div>\n\n\nHow to start a sequenced animation where the node fades in to white during 0.5 seconds, stays visible for 2 seconds and then fades out:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">on_animation_done</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fade out node, but wait 2 seconds before the animation starts</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_OUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fetch the node we want to animate</span>\n    <span class=\"kd\">local</span> <span class=\"n\">my_node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- node is initially set to fully transparent</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">my_node</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"c1\">-- animate the node immediately and call on_animation_done when the animation has completed</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">my_node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_INOUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">on_animation_done</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\nHow to animate a node's y position using a crazy custom easing curve:\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n    <span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">box&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">position.y&quot;</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_LOOP_PINGPONG</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.animate"
    }, 
    {
      "replaces": "", 
      "description": "If an animation of the specified node is currently running (started by <code>gui.animate</code>), it will immediately be canceled.", 
      "parameters": [
        {
          "doc": "node that should have its animation canceled", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "property for which the animation should be canceled\n<ul>\n<li><code>\"position\"</code></li>\n<li><code>\"rotation\"</code></li>\n<li><code>\"scale\"</code></li>\n<li><code>\"color\"</code></li>\n<li><code>\"outline\"</code></li>\n<li><code>\"shadow\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"fill_angle\"</code> (pie)</li>\n<li><code>\"inner_radius\"</code> (pie)</li>\n<li><code>\"slice9\"</code> (slice9)</li>\n</ul>", 
          "name": "property", 
          "types": [
            "string", 
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "cancels an ongoing animation", 
      "examples": "Start an animation of the position property of a node, then cancel parts of\nthe animation:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">-- animate to new position</span>\n<span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">position&quot;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_LINEAR</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"c1\">-- cancel animation of the x component.</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">cancel_animation</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">position.x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.cancel_animation"
    }, 
    {
      "replaces": "", 
      "description": "Dynamically create a new box node.", 
      "parameters": [
        {
          "doc": "node position", 
          "name": "pos", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }, 
        {
          "doc": "node size", 
          "name": "size", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "new box node", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "creates a new box node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.new_box_node"
    }, 
    {
      "replaces": "", 
      "description": "Dynamically create a new text node.", 
      "parameters": [
        {
          "doc": "node position", 
          "name": "pos", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }, 
        {
          "doc": "node text", 
          "name": "text", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "new text node", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "creates a new text node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.new_text_node"
    }, 
    {
      "replaces": "", 
      "description": "Dynamically create a new pie node.", 
      "parameters": [
        {
          "doc": "node position", 
          "name": "pos", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }, 
        {
          "doc": "node size", 
          "name": "size", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "new pie node", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "creates a new pie node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.new_pie_node"
    }, 
    {
      "replaces": "", 
      "description": "Dynamically create a new spine node.", 
      "parameters": [
        {
          "doc": "node position", 
          "name": "pos", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }, 
        {
          "doc": "spine scene id", 
          "name": "spine_scene", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "new spine node", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "creates a new spine node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.new_spine_node"
    }, 
    {
      "replaces": "", 
      "description": "Returns the text value of a text node. This is only useful for text nodes.", 
      "parameters": [
        {
          "doc": "node from which to get the text", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "text value", 
          "name": "text", 
          "types": [
            "string"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node text", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_text"
    }, 
    {
      "replaces": "", 
      "description": "Set the text value of a text node. This is only useful for text nodes.", 
      "parameters": [
        {
          "doc": "node to set text for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "text to set", 
          "name": "text", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node text", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_text"
    }, 
    {
      "replaces": "", 
      "description": "Returns whether a text node is in line-break mode or not.\nThis is only useful for text nodes.", 
      "parameters": [
        {
          "doc": "node from which to get the line-break for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "<code>true</code> or <code>false</code>", 
          "name": "line_break", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get line-break mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_line_break"
    }, 
    {
      "replaces": "", 
      "description": "Sets the line-break mode on a text node.\nThis is only useful for text nodes.", 
      "parameters": [
        {
          "doc": "node to set line-break for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "true or false", 
          "name": "line_break", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set line-break mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_line_break"
    }, 
    {
      "replaces": "", 
      "description": "Returns the blend mode of a node.\nBlend mode defines how the node will be blended with the background.", 
      "parameters": [
        {
          "doc": "node from which to get the blend mode", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "blend mode\n<ul>\n<li><code>gui.BLEND_ALPHA</code></li>\n<li><code>gui.BLEND_ADD</code></li>\n<li><code>gui.BLEND_ADD_ALPHA</code></li>\n<li><code>gui.BLEND_MULT</code></li>\n</ul>", 
          "name": "blend_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node blend mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_blend_mode"
    }, 
    {
      "replaces": "", 
      "description": "Set the blend mode of a node.\nBlend mode defines how the node will be blended with the background.", 
      "parameters": [
        {
          "doc": "node to set blend mode for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "blend mode to set\n<ul>\n<li><code>gui.BLEND_ALPHA</code></li>\n<li><code>gui.BLEND_ADD</code></li>\n<li><code>gui.BLEND_ADD_ALPHA</code></li>\n<li><code>gui.BLEND_MULT</code></li>\n</ul>", 
          "name": "blend_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets node blend mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_blend_mode"
    }, 
    {
      "replaces": "", 
      "description": "Returns the texture of a node.\nThis is currently only useful for box or pie nodes.\nThe texture must be mapped to the gui scene in the gui editor.", 
      "parameters": [
        {
          "doc": "node to get texture from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "texture id", 
          "name": "texture", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets node texture", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_texture"
    }, 
    {
      "replaces": "", 
      "description": "Set the texture on a box or pie node. The texture must be mapped to\nthe gui scene in the gui editor. The function points out which texture\nthe node should render from. If the texture is an atlas, further\ninformation is needed to select which image/animation in the atlas\nto render. In such cases, use <code>gui.play_flipbook()</code> in\naddition to this function.", 
      "parameters": [
        {
          "doc": "node to set texture for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "texture id", 
          "name": "texture", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node texture", 
      "examples": "To set a texture (or animation) from an atlas:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">box_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">my_atlas&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">image&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n\nSet a dynamically created texture to a node. Note that there is only\none texture image in this case so <code>gui.set_texture()</code> is\nsufficient.\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n<span class=\"c1\">-- A nice orange. String with the RGB values.</span>\n<span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n<span class=\"c1\">-- Create the texture. Repeat the color string for each pixel.</span>\n<span class=\"k\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">orange_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span> <span class=\"k\">then</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">box_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">orange_tx&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_texture"
    }, 
    {
      "replaces": "", 
      "description": "Get node flipbook animation.", 
      "parameters": [
        {
          "doc": "node to get flipbook animation from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "animation id", 
          "name": "animation", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node flipbook animation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_flipbook"
    }, 
    {
      "replaces": "", 
      "description": "Play flipbook animation on a box or pie node.\nThe current node texture must contain the animation.\nUse this function to set one-frame still images on the node.", 
      "parameters": [
        {
          "doc": "node to set animation for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "animation id", 
          "name": "animation", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "optional function to call when the animation has completed\n<dl>\n<dt><code>self</code></dt>\n<dd>\n<span class=\"type\">object</span> The current object.\n</dd>\n<dt><code>node</code></dt>\n<dd>\n<span class=\"type\">node</span> The node that is animated.\n</dd>\n</dl>", 
          "name": "[complete_function]", 
          "types": [
            "function(self, node)"
          ]
        }, 
        {
          "doc": "optional table with properties\n<dl>\n<dt><code>offset</code></dt>\n<dd><span class=\"type\">number</span> The normalized initial value of the animation cursor when the animation starts playing</dd>\n<dt><code>playback_rate</code></dt>\n<dd><span class=\"type\">number</span> The rate with which the animation will be played. Must be positive</dd>\n</dl>", 
          "name": "[play_properties]", 
          "types": [
            "table"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "play node flipbook animation", 
      "examples": "Set the texture of a node to a flipbook animation from an atlas:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">anim_callback</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- Take action after animation has played.</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- Create a new node and set the texture to a flipbook animation</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">button_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">gui_sprites&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">animated_button&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\nSet the texture of a node to an image from an atlas:\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Create a new node and set the texture to a &quot;button.png&quot; from atlas</span>\n<span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">button_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">gui_sprites&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">button&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.play_flipbook"
    }, 
    {
      "replaces": "", 
      "description": "Cancels any running flipbook animation on the specified node.", 
      "parameters": [
        {
          "doc": "node cancel flipbook animation for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "cancel a node flipbook animation", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">anim_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">cancel_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.cancel_flipbook"
    }, 
    {
      "replaces": "", 
      "description": "Dynamically create a new texture.", 
      "parameters": [
        {
          "doc": "texture id", 
          "name": "texture", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "texture width", 
          "name": "width", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "texture height", 
          "name": "height", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "texture type\n<ul>\n<li><code>\"rgb\"</code> - RGB</li></li>\n<li><code>\"rgba\"</code> - RGBA</li></li>\n<li><code>\"l\"</code> - LUMINANCE</li></li>\n</ul>", 
          "name": "type", 
          "types": [
            "string", 
            "constant"
          ]
        }, 
        {
          "doc": "texture data", 
          "name": "buffer", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "flip texture vertically", 
          "name": "flip", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "texture creation was successful", 
          "name": "success", 
          "types": [
            "boolean"
          ]
        }, 
        {
          "doc": "one of the gui.RESULT_* codes if unsuccessful", 
          "name": "code", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "create new texture", 
      "examples": "How to create a texture and apply it to a new box node:\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n     <span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n     <span class=\"c1\">-- A nice orange. String with the RGB values.</span>\n     <span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n\n     <span class=\"c1\">-- Create the texture. Repeat the color string for each pixel.</span>\n     <span class=\"kd\">local</span> <span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">reason</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">orange_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span>\n     <span class=\"k\">if</span> <span class=\"n\">ok</span> <span class=\"k\">then</span>\n         <span class=\"c1\">-- Create a box node and apply the texture to it.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">orange_tx&quot;</span><span class=\"p\">)</span>\n     <span class=\"k\">else</span>\n         <span class=\"c1\">-- Could not create texture for some reason...</span>\n         <span class=\"k\">if</span> <span class=\"n\">reason</span> <span class=\"o\">==</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">RESULT_TEXTURE_ALREADY_EXISTS</span> <span class=\"k\">then</span>\n             <span class=\"o\">...</span>\n         <span class=\"k\">else</span>\n             <span class=\"o\">...</span>\n         <span class=\"k\">end</span>\n     <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.new_texture"
    }, 
    {
      "replaces": "", 
      "description": "Delete a dynamically created texture.", 
      "parameters": [
        {
          "doc": "texture id", 
          "name": "texture", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "delete texture", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"c1\">-- Create a texture.</span>\n     <span class=\"k\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">temp_tx&quot;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\0</span><span class=\"s\">&#39;</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"k\">then</span>\n         <span class=\"c1\">-- Do something with the texture.</span>\n         <span class=\"o\">...</span>\n\n         <span class=\"c1\">-- Delete the texture</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">delete_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">temp_tx&quot;</span><span class=\"p\">)</span>\n     <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.delete_texture"
    }, 
    {
      "replaces": "", 
      "description": "Set the texture buffer data for a dynamically created texture.", 
      "parameters": [
        {
          "doc": "texture id", 
          "name": "texture", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "texture width", 
          "name": "width", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "texture height", 
          "name": "height", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "texture type\n<ul>\n  <li><code>\"rgb\"</code> - RGB</li>\n  <li><code>\"rgba\"</code> - RGBA</li>\n  <li><code>\"l\"</code> - LUMINANCE</li>\n</ul>", 
          "name": "type", 
          "types": [
            "string", 
            "constant"
          ]
        }, 
        {
          "doc": "texture data", 
          "name": "buffer", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "flip texture vertically", 
          "name": "flip", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "setting the data was successful", 
          "name": "success", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "set the buffer data for a texture", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n     <span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n     <span class=\"c1\">-- Create a dynamic texture, all white.</span>\n     <span class=\"k\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">dynamic_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">),</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"k\">then</span>\n         <span class=\"c1\">-- Create a box node and apply the texture to it.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">dynamic_tx&quot;</span><span class=\"p\">)</span>\n\n         <span class=\"o\">...</span>\n\n         <span class=\"c1\">-- Change the data in the texture to a nice orange.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n         <span class=\"k\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture_data</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">dynamic_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span> <span class=\"k\">then</span>\n             <span class=\"c1\">-- Go on and to more stuff</span>\n             <span class=\"o\">...</span>\n         <span class=\"k\">end</span>\n     <span class=\"k\">else</span>\n         <span class=\"c1\">-- Something went wrong</span>\n         <span class=\"o\">...</span>\n     <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_texture_data"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful for text nodes. The font must be mapped to the gui scene in the gui editor.", 
      "parameters": [
        {
          "doc": "node from which to get the font", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "font id", 
          "name": "font", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node font", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_font"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful for text nodes.\nThe font must be mapped to the gui scene in the gui editor.", 
      "parameters": [
        {
          "doc": "node for which to set the font", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "font id", 
          "name": "font", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node font", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_font"
    }, 
    {
      "replaces": "", 
      "description": "The layer must be mapped to the gui scene in the gui editor.", 
      "parameters": [
        {
          "doc": "node from which to get the layer", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "layer id", 
          "name": "layer", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node layer", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_layer"
    }, 
    {
      "replaces": "", 
      "description": "The layer must be mapped to the gui scene in the gui editor.", 
      "parameters": [
        {
          "doc": "node for which to set the layer", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "layer id", 
          "name": "layer", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node layer", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_layer"
    }, 
    {
      "replaces": "", 
      "description": "gets the scene current layout", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "layout id", 
          "name": "layout", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the scene current layout", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_layout"
    }, 
    {
      "replaces": "", 
      "description": "Clipping mode defines how the node will clip it's children nodes", 
      "parameters": [
        {
          "doc": "node from which to get the clipping mode", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "clipping mode\n<ul>\n  <li><code>gui.CLIPPING_MODE_NONE</code></li>\n  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>\n</ul>", 
          "name": "clipping_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node clipping mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_clipping_mode"
    }, 
    {
      "replaces": "", 
      "description": "Clipping mode defines how the node will clip it's children nodes", 
      "parameters": [
        {
          "doc": "node to set clipping mode for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "clipping mode to set\n<ul>\n  <li><code>gui.CLIPPING_MODE_NONE</code></li>\n  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>\n</ul>", 
          "name": "clipping_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets node clipping mode state", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_clipping_mode"
    }, 
    {
      "replaces": "", 
      "description": "If node is set as visible clipping node, it will be shown as well as clipping. Otherwise, it will only clip but not show visually.", 
      "parameters": [
        {
          "doc": "node from which to get the clipping visibility state", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "true or false", 
          "name": "visible", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets node clipping visibility state", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_clipping_visible"
    }, 
    {
      "replaces": "", 
      "description": "If node is set as an visible clipping node, it will be shown as well as clipping. Otherwise, it will only clip but not show visually.", 
      "parameters": [
        {
          "doc": "node to set clipping visibility for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "true or false", 
          "name": "visible", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets node clipping visibility", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_clipping_visible"
    }, 
    {
      "replaces": "", 
      "description": "If node is set as an inverted clipping node, it will clip anything inside as opposed to outside.", 
      "parameters": [
        {
          "doc": "node from which to get the clipping inverted state", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "true or false", 
          "name": "inverted", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets node clipping inverted state", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_clipping_inverted"
    }, 
    {
      "replaces": "", 
      "description": "If node is set as an inverted clipping node, it will clip anything inside as opposed to outside.", 
      "parameters": [
        {
          "doc": "node to set clipping inverted state for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "true or false", 
          "name": "inverted", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets node clipping inversion", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_clipping_inverted"
    }, 
    {
      "replaces": "", 
      "description": "Get the text metrics from a text node.", 
      "parameters": [
        {
          "doc": "text node to measure text from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a table with the following fields:\n<ul>\n<li>width</li>\n<li>height</li>\n<li>max_ascent</li>\n<li>max_descent</li>\n</ul>", 
          "name": "metrics", 
          "types": [
            "table"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get text metrics from node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_text_metrics_from_node"
    }, 
    {
      "replaces": "", 
      "description": "Get text metrics given the provided font, text and parameters.", 
      "parameters": [
        {
          "doc": "font id", 
          "name": "font", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "text to measure", 
          "name": "text", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "max-width. Use for line-breaks (default=FLT_MAX)", 
          "name": "width", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "true to break lines accordingly to width (default=false)", 
          "name": "line_break", 
          "types": [
            "boolean"
          ]
        }, 
        {
          "doc": "scale value for line spacing (default=1)", 
          "name": "leading", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "scale value for letter spacing (default=0)", 
          "name": "tracking", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a table with the following fields:\n<ul>\n<li>width</li>\n<li>height</li>\n<li>max_ascent</li>\n<li>max_descent</li>\n</ul>", 
          "name": "metrics", 
          "types": [
            "table"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get text metrics", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_text_metrics"
    }, 
    {
      "replaces": "", 
      "description": "The x-anchor specifies how the node is moved when the game is run in a different resolution.", 
      "parameters": [
        {
          "doc": "node to get x-anchor from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_LEFT</code></li>\n<li><code>gui.ANCHOR_RIGHT</code></li>\n</ul>", 
          "name": "anchor", 
          "types": [
            "constant"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the x-anchor of a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_xanchor"
    }, 
    {
      "replaces": "", 
      "description": "The x-anchor specifies how the node is moved when the game is run in a different resolution.", 
      "parameters": [
        {
          "doc": "node to set x-anchor for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_LEFT</code></li>\n<li><code>gui.ANCHOR_RIGHT</code></li>\n</ul>", 
          "name": "anchor", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the x-anchor of a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_xanchor"
    }, 
    {
      "replaces": "", 
      "description": "The y-anchor specifies how the node is moved when the game is run in a different resolution.", 
      "parameters": [
        {
          "doc": "node to get y-anchor from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_TOP</code></li>\n<li><code>gui.ANCHOR_BOTTOM</code></li>\n</ul>", 
          "name": "anchor", 
          "types": [
            "constant"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the y-anchor of a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_yanchor"
    }, 
    {
      "replaces": "", 
      "description": "The y-anchor specifies how the node is moved when the game is run in a different resolution.", 
      "parameters": [
        {
          "doc": "node to set y-anchor for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_TOP</code></li>\n<li><code>gui.ANCHOR_BOTTOM</code></li>\n</ul>", 
          "name": "anchor", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the y-anchor of a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_yanchor"
    }, 
    {
      "replaces": "", 
      "description": "The pivot specifies how the node is drawn and rotated from its position.", 
      "parameters": [
        {
          "doc": "node to get pivot from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "pivot constant\n<ul>\n  <li><code>gui.PIVOT_CENTER</code></li>\n  <li><code>gui.PIVOT_N</code></li>\n  <li><code>gui.PIVOT_NE</code></li>\n  <li><code>gui.PIVOT_E</code></li>\n  <li><code>gui.PIVOT_SE</code></li>\n  <li><code>gui.PIVOT_S</code></li>\n  <li><code>gui.PIVOT_SW</code></li>\n  <li><code>gui.PIVOT_W</code></li>\n  <li><code>gui.PIVOT_NW</code></li>\n</ul>", 
          "name": "pivot", 
          "types": [
            "constant"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the pivot of a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_pivot"
    }, 
    {
      "replaces": "", 
      "description": "The pivot specifies how the node is drawn and rotated from its position.", 
      "parameters": [
        {
          "doc": "node to set pivot for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "pivot constant\n<ul>\n  <li><code>gui.PIVOT_CENTER</code></li>\n  <li><code>gui.PIVOT_N</code></li>\n  <li><code>gui.PIVOT_NE</code></li>\n  <li><code>gui.PIVOT_E</code></li>\n  <li><code>gui.PIVOT_SE</code></li>\n  <li><code>gui.PIVOT_S</code></li>\n  <li><code>gui.PIVOT_SW</code></li>\n  <li><code>gui.PIVOT_W</code></li>\n  <li><code>gui.PIVOT_NW</code></li>\n</ul>", 
          "name": "pivot", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the pivot of a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_pivot"
    }, 
    {
      "replaces": "", 
      "description": "Returns the scene width.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "scene width", 
          "name": "width", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the scene width", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_width"
    }, 
    {
      "replaces": "", 
      "description": "Returns the scene height.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "scene height", 
          "name": "height", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the scene height", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_height"
    }, 
    {
      "replaces": "", 
      "description": "Set the slice9 configuration values for the node.", 
      "parameters": [
        {
          "doc": "node to manipulate", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "new values", 
          "name": "values", 
          "types": [
            "vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the slice9 configuration for the node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_slice9"
    }, 
    {
      "replaces": "", 
      "description": "Returns the slice9 configuration values for the node.", 
      "parameters": [
        {
          "doc": "node to manipulate", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "configuration values", 
          "name": "values", 
          "types": [
            "vector4"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get the slice9 values for the node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_slice9"
    }, 
    {
      "replaces": "", 
      "description": "Sets the number of generated vertices around the perimeter of a pie node.", 
      "parameters": [
        {
          "doc": "pie node", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "vertex count", 
          "name": "vertices", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the number of generated vertices around the perimeter", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_perimeter_vertices"
    }, 
    {
      "replaces": "", 
      "description": "Returns the number of generated vertices around the perimeter\nof a pie node.", 
      "parameters": [
        {
          "doc": "pie node", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "vertex count", 
          "name": "vertices", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the number of generated vertices around the perimeter", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_perimeter_vertices"
    }, 
    {
      "replaces": "", 
      "description": "Set the sector angle of a pie node.", 
      "parameters": [
        {
          "doc": "node to set the fill angle for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "sector angle", 
          "name": "angle", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the angle for the filled pie sector", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_fill_angle"
    }, 
    {
      "replaces": "", 
      "description": "Returns the sector angle of a pie node.", 
      "parameters": [
        {
          "doc": "node from which to get the fill angle", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "sector angle", 
          "name": "angle", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the angle for the filled pie sector", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_fill_angle"
    }, 
    {
      "replaces": "", 
      "description": "Sets the inner radius of a pie node.\nThe radius is defined along the x-axis.", 
      "parameters": [
        {
          "doc": "node to set the inner radius for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "inner radius", 
          "name": "radius", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the pie inner radius", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_inner_radius"
    }, 
    {
      "replaces": "", 
      "description": "Returns the inner radius of a pie node.\nThe radius is defined along the x-axis.", 
      "parameters": [
        {
          "doc": "node from where to get the inner radius", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "inner radius", 
          "name": "radius", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the pie inner radius", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_inner_radius"
    }, 
    {
      "replaces": "", 
      "description": "Sets the outer bounds mode for a pie node.", 
      "parameters": [
        {
          "doc": "node for which to set the outer bounds mode", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "the outer bounds mode of the pie node:\n<ul>\n<li><code>gui.PIEBOUNDS_RECTANGLE</code></li>\n<li><code>gui.PIEBOUNDS_ELLIPSE</code></li>\n</ul>", 
          "name": "bounds_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the pie node outer bounds mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_outer_bounds"
    }, 
    {
      "replaces": "", 
      "description": "Returns the outer bounds mode for a pie node.", 
      "parameters": [
        {
          "doc": "node from where to get the outer bounds mode", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the outer bounds mode of the pie node:\n<ul>\n<li><code>gui.PIEBOUNDS_RECTANGLE</code></li>\n<li><code>gui.PIEBOUNDS_ELLIPSE</code></li>\n</ul>", 
          "name": "bounds_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the pie outer bounds mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_outer_bounds"
    }, 
    {
      "replaces": "", 
      "description": "Sets the leading value for a text node. This value is used to\nscale the line spacing of text.", 
      "parameters": [
        {
          "doc": "node for which to set the leading", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "a scaling value for the line spacing (default=1)", 
          "name": "leading", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the leading of the text node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_leading"
    }, 
    {
      "replaces": "", 
      "description": "Returns the leading value for a text node.", 
      "parameters": [
        {
          "doc": "node from where to get the leading", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "leading scaling value (default=1)", 
          "name": "leading", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the leading of the text node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_leading"
    }, 
    {
      "replaces": "", 
      "description": "Sets the tracking value of a text node. This value is used to\nadjust the vertical spacing of characters in the text.", 
      "parameters": [
        {
          "doc": "node for which to set the tracking", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "a scaling number for the letter spacing (default=0)", 
          "name": "tracking", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the tracking of the text node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_tracking"
    }, 
    {
      "replaces": "", 
      "description": "Returns the tracking value of a text node.", 
      "parameters": [
        {
          "doc": "node from where to get the tracking", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "tracking scaling number (default=0)", 
          "name": "tracking", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the tracking of the text node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_tracking"
    }, 
    {
      "replaces": "", 
      "description": "Tests whether a coordinate is within the bounding box of a\nnode.", 
      "parameters": [
        {
          "doc": "node to be tested for picking", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "x-coordinate (see <a href=\"#on_input\">on_input</a> )", 
          "name": "x", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "y-coordinate (see <a href=\"#on_input\">on_input</a> )", 
          "name": "y", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "pick result", 
          "name": "pickable", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "determines if the node is pickable by the supplied coordinates", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.pick_node"
    }, 
    {
      "replaces": "", 
      "description": "Returns <code>true</code> if a node is enabled and <code>false</code> if it's not.\nDisabled nodes are not rendered and animations acting on them are not evaluated.", 
      "parameters": [
        {
          "doc": "node to query", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "whether the node is enabled or not", 
          "name": "enabled", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "returns if a node is enabled or not", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.is_enabled"
    }, 
    {
      "replaces": "", 
      "description": "Sets a node to the disabled or enabled state.\nDisabled nodes are not rendered and animations acting on them are not evaluated.", 
      "parameters": [
        {
          "doc": "node to be enabled/disabled", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "whether the node should be enabled or not", 
          "name": "enabled", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "enables/disables a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_enabled"
    }, 
    {
      "replaces": "", 
      "description": "Returns the adjust mode of a node.\nThe adjust mode defines how the node will adjust itself to screen\nresolutions that differs from the one in the project settings.", 
      "parameters": [
        {
          "doc": "node from which to get the adjust mode (node)", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the current adjust mode\n<ul>\n<li><code>gui.ADJUST_FIT</code></li>\n<li><code>gui.ADJUST_ZOOM</code></li>\n<li><code>gui.ADJUST_STRETCH</code></li>\n</ul>", 
          "name": "adjust_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node adjust mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_adjust_mode"
    }, 
    {
      "replaces": "", 
      "description": "Sets the adjust mode on a node.\nThe adjust mode defines how the node will adjust itself to screen\nresolutions that differs from the one in the project settings.", 
      "parameters": [
        {
          "doc": "node to set adjust mode for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "adjust mode to set\n<ul>\n<li><code>gui.ADJUST_FIT</code></li>\n<li><code>gui.ADJUST_ZOOM</code></li>\n<li><code>gui.ADJUST_STRETCH</code></li>\n</ul>", 
          "name": "adjust_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets node adjust mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_adjust_mode"
    }, 
    {
      "replaces": "", 
      "description": "Returns the size of a node.\nThe size mode defines how the node will adjust itself in size. Automatic\nsize mode alters the node size based on the node's content. Automatic size\nmode works for Box nodes and Pie nodes which will both adjust their size\nto match the assigned image. Spine, Particle fx and Text nodes will ignore\nany size mode setting.", 
      "parameters": [
        {
          "doc": "node from which to get the size mode (node)", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the current size mode\n<ul>\n<li><code>gui.SIZE_MODE_MANUAL</code></li>\n<li><code>gui.SIZE_MODE_AUTO</code></li>\n</ul>", 
          "name": "size_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node size mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_size_mode"
    }, 
    {
      "replaces": "", 
      "description": "Sets the size mode of a node.\nThe size mode defines how the node will adjust itself in size. Automatic\nsize mode alters the node size based on the node's content. Automatic size\nmode works for Box nodes and Pie nodes which will both adjust their size\nto match the assigned image. Spine, Particle fx and Text nodes will ignore\nany size mode setting.", 
      "parameters": [
        {
          "doc": "node to set size mode for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "size mode to set\n<ul>\n<li><code>gui.SIZE_MODE_MANUAL</code></li>\n<li><code>gui.SIZE_MODE_AUTO</code></li>\n</ul>", 
          "name": "size_mode", 
          "types": [
            "constant"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets node size mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_size_mode"
    }, 
    {
      "replaces": "", 
      "description": "Alters the ordering of the two supplied nodes by moving the first node\nabove the second.\nIf the second argument is <code>nil</code> the first node is moved to the top.", 
      "parameters": [
        {
          "doc": "to move", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "reference node above which the first node should be moved", 
          "name": "node", 
          "types": [
            "node", 
            "nil"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "moves the first node above the second", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.move_above"
    }, 
    {
      "replaces": "", 
      "description": "Alters the ordering of the two supplied nodes by moving the first node\nbelow the second.\nIf the second argument is <code>nil</code> the first node is moved to the bottom.", 
      "parameters": [
        {
          "doc": "to move", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "reference node below which the first node should be moved", 
          "name": "node", 
          "types": [
            "node", 
            "nil"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "moves the first node below the second", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.move_below"
    }, 
    {
      "replaces": "", 
      "description": "Returns the parent node of the specified node.\nIf the supplied node does not have a parent, <code>nil</code> is returned.", 
      "parameters": [
        {
          "doc": "the node from which to retrieve its parent", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "parent instance or nil", 
          "name": "parent", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the parent of the specified node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_parent"
    }, 
    {
      "replaces": "", 
      "description": "Sets the parent node of the specified node.", 
      "parameters": [
        {
          "doc": "node for which to set its parent", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "parent node to set", 
          "name": "parent", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "optional flag to make the scene position being perserved", 
          "name": "keep_scene_transform", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the parent of the node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_parent"
    }, 
    {
      "replaces": "", 
      "description": "Make a clone instance of a node.\nThis function does not clone the supplied node's children nodes.\nUse gui.clone_tree for that purpose.", 
      "parameters": [
        {
          "doc": "node to clone", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the cloned node", 
          "name": "clone", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "clone a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.clone"
    }, 
    {
      "replaces": "", 
      "description": "Make a clone instance of a node and all its children.\nUse gui.clone to clone a node excluding its children.", 
      "parameters": [
        {
          "doc": "root node to clone", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a table mapping node ids to the corresponding cloned nodes", 
          "name": "clones", 
          "types": [
            "table"
          ]
        }
      ], 
      "notes": [], 
      "brief": "clone a node including its children", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.clone_tree"
    }, 
    {
      "replaces": "", 
      "description": "Resets all nodes in the current GUI scene to their initial state.\nThe reset only applies to static node loaded from the scene.\nNodes that are created dynamically from script are not affected.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "resets all nodes to initial state", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.reset_nodes"
    }, 
    {
      "replaces": "", 
      "description": "Set the order number for the current GUI scene.\nThe number dictates the sorting of the \"gui\" render predicate,\nin other words in which order the scene will be rendered in relation\nto other currently rendered GUI scenes.\nThe number must be in the range 0 to 15.", 
      "parameters": [
        {
          "doc": "rendering order (0-15)", 
          "name": "order", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the render ordering for the current GUI scene", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_render_order"
    }, 
    {
      "replaces": "", 
      "description": "default keyboard", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "default keyboard", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.KEYBOARD_TYPE_DEFAULT"
    }, 
    {
      "replaces": "", 
      "description": "number input keyboard", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "number input keyboard", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.KEYBOARD_TYPE_NUMBER_PAD"
    }, 
    {
      "replaces": "", 
      "description": "email keyboard", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "email keyboard", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.KEYBOARD_TYPE_EMAIL"
    }, 
    {
      "replaces": "", 
      "description": "password keyboard", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "password keyboard", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.KEYBOARD_TYPE_PASSWORD"
    }, 
    {
      "replaces": "", 
      "description": "Shows the on-display touch keyboard.\nThe specified type of keyboard is displayed if it is available on\nthe device.\nThis function is only available on iOS and Android. <span class=\"icon-ios\"></span> <span class=\"icon-android\"></span>.", 
      "parameters": [
        {
          "doc": "keyboard type\n<ul>\n<li><code>gui.KEYBOARD_TYPE_DEFAULT</code></li>\n<li><code>gui.KEYBOARD_TYPE_EMAIL</code></li>\n<li><code>gui.KEYBOARD_TYPE_NUMBER_PAD</code></li>\n<li><code>gui.KEYBOARD_TYPE_PASSWORD</code></li>\n</ul>", 
          "name": "type", 
          "types": [
            "constant"
          ]
        }, 
        {
          "doc": "if the keyboard should automatically close when clicking outside", 
          "name": "autoclose", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "shows the on-display keyboard if available <span class=\"icon-ios\"></span> <span class=\"icon-android\"></span>", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.show_keyboard"
    }, 
    {
      "replaces": "", 
      "description": "Hides the on-display touch keyboard on the device.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "hides on-display keyboard if available", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.hide_keyboard"
    }, 
    {
      "replaces": "", 
      "description": "Resets the input context of keyboard. This will clear marked text.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "resets on-display keyboard if available", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.reset_keyboard"
    }, 
    {
      "replaces": "", 
      "description": "Returns the position of the supplied node.", 
      "parameters": [
        {
          "doc": "node to get the position from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "node position", 
          "name": "position", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node position", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_position"
    }, 
    {
      "replaces": "", 
      "description": "Sets the position of the supplied node.", 
      "parameters": [
        {
          "doc": "node to set the position for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "new position", 
          "name": "position", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node position", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_position"
    }, 
    {
      "replaces": "", 
      "description": "Returns the rotation of the supplied node.\nThe rotation is expressed in degree Euler angles.", 
      "parameters": [
        {
          "doc": "node to get the rotation from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "node rotation", 
          "name": "rotation", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node rotation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_rotation"
    }, 
    {
      "replaces": "", 
      "description": "Sets the rotation of the supplied node.\nThe rotation is expressed in degree Euler angles.", 
      "parameters": [
        {
          "doc": "node to set the rotation for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "new rotation", 
          "name": "rotation", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node rotation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_rotation"
    }, 
    {
      "replaces": "", 
      "description": "Returns the scale of the supplied node.", 
      "parameters": [
        {
          "doc": "node to get the scale from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "node scale", 
          "name": "scale", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node scale", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_scale"
    }, 
    {
      "replaces": "", 
      "description": "Sets the scaling of the supplied node.", 
      "parameters": [
        {
          "doc": "node to set the scale for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "new scale", 
          "name": "scale", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node scale", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_scale"
    }, 
    {
      "replaces": "", 
      "description": "Returns the color of the supplied node. The components\nof the returned vector4 contains the color channel values:\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Color value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x</td>\n<td>Red value</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Green value</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Blue value</td>\n</tr>\n<tr>\n<td>w</td>\n<td>Alpha value</td>\n</tr>\n</tbody>\n</table>", 
      "parameters": [
        {
          "doc": "node to get the color from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "node color", 
          "name": "color", 
          "types": [
            "vector4"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node color", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_color"
    }, 
    {
      "replaces": "", 
      "description": "Sets the color of the supplied node. The components\nof the supplied vector3 or vector4 should contain the color channel values:\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Color value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x</td>\n<td>Red value</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Green value</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Blue value</td>\n</tr>\n<tr>\n<td>w <span class=\"type\">vector4</span></td>\n<td>Alpha value</td>\n</tr>\n</tbody>\n</table>", 
      "parameters": [
        {
          "doc": "node to set the color for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "new color", 
          "name": "color", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node color", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_color"
    }, 
    {
      "replaces": "", 
      "description": "Returns the outline color of the supplied node.\nSee <a href=\"/ref/gui#gui.get_color\">gui.get_color</a> for info how vectors encode color values.", 
      "parameters": [
        {
          "doc": "node to get the outline color from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "outline color", 
          "name": "color", 
          "types": [
            "vector4"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node outline color", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_outline"
    }, 
    {
      "replaces": "", 
      "description": "Sets the outline color of the supplied node.\nSee <a href=\"/ref/gui#gui.set_color\">gui.set_color</a> for info how vectors encode color values.", 
      "parameters": [
        {
          "doc": "node to set the outline color for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "new outline color", 
          "name": "color", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node outline color", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_outline"
    }, 
    {
      "replaces": "", 
      "description": "Returns the shadow color of the supplied node.\nSee <a href=\"/ref/gui#gui.get_color\">gui.get_color</a> for info how vectors encode color values.", 
      "parameters": [
        {
          "doc": "node to get the shadow color from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "node shadow color", 
          "name": "color", 
          "types": [
            "vector4"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node shadow color", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_shadow"
    }, 
    {
      "replaces": "", 
      "description": "Sets the shadow color of the supplied node.\nSee <a href=\"/ref/gui#gui.set_color\">gui.set_color</a> for info how vectors encode color values.", 
      "parameters": [
        {
          "doc": "node to set the shadow color for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "new shadow color", 
          "name": "color", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node shadow color", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_shadow"
    }, 
    {
      "replaces": "", 
      "description": "Sets the size of the supplied node.\n<span class=\"icon-attention\"></span> You can only set size on nodes with size mode set to SIZE_MODE_MANUAL", 
      "parameters": [
        {
          "doc": "node to set the size for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "new size", 
          "name": "size", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node size", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_size"
    }, 
    {
      "replaces": "", 
      "description": "Returns the size of the supplied node.", 
      "parameters": [
        {
          "doc": "node to get the size from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "node size", 
          "name": "size", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node size", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_size"
    }, 
    {
      "replaces": "", 
      "description": "Returns the screen position of the supplied node. This function returns the\ncalculated transformed position of the node, taking into account any parent node\ntransforms.", 
      "parameters": [
        {
          "doc": "node to get the screen position from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "node screen position", 
          "name": "position", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the node screen position", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_screen_position"
    }, 
    {
      "replaces": "gui.play_spine", 
      "description": "Starts a spine animation.", 
      "parameters": [
        {
          "doc": "spine node that should play the animation", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "id of the animation to play", 
          "name": "animation_id", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "playback mode\n<ul>\n<li><code>gui.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>gui.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>gui.PLAYBACK_ONCE_PINGPONG</code></li>\n<li><code>gui.PLAYBACK_LOOP_FORWARD</code></li>\n<li><code>gui.PLAYBACK_LOOP_BACKWARD</code></li>\n<li><code>gui.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>", 
          "name": "playback", 
          "types": [
            "constant"
          ]
        }, 
        {
          "doc": "optional table with properties\n<dl>\n<dt><code>blend_duration</code></dt>\n<dd><span class=\"type\">number</span> The duration of a linear blend between the current and new animation</dd>\n<dt><code>offset</code></dt>\n<dd><span class=\"type\">number</span> The normalized initial value of the animation cursor when the animation starts playing</dd>\n<dt><code>playback_rate</code></dt>\n<dd><span class=\"type\">number</span> The rate with which the animation will be played. Must be positive</dd>\n</dl>", 
          "name": "[play_properties]", 
          "types": [
            "table"
          ]
        }, 
        {
          "doc": "function to call when the animation has completed", 
          "name": "[complete_function]", 
          "types": [
            "function(self, node)"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "play a spine animation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.play_spine_anim"
    }, 
    {
      "replaces": "", 
      "description": "cancel a spine animation", 
      "parameters": [
        {
          "doc": "spine node that should cancel its animation", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "cancel a spine animation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.cancel_spine"
    }, 
    {
      "replaces": "", 
      "description": "The returned node can be used for parenting and transform queries.\nThis function has complexity O(n), where n is the number of bones in the spine model skeleton.", 
      "parameters": [
        {
          "doc": "spine node to query for bone node", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "id of the corresponding bone", 
          "name": "bone_id", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "node corresponding to the spine bone", 
          "name": "bone", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "retrieve the GUI node corresponding to a spine skeleton bone", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_spine_bone"
    }, 
    {
      "replaces": "", 
      "description": "Set the spine scene on a spine node. The spine scene must be mapped to the gui scene in the gui editor.", 
      "parameters": [
        {
          "doc": "node to set spine scene for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "spine scene id", 
          "name": "spine_scene", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the spine scene of a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_spine_scene"
    }, 
    {
      "replaces": "", 
      "description": "Returns the spine scene id of the supplied node.\nThis is currently only useful for spine nodes.\nThe returned spine scene must be mapped to the gui scene in the gui editor.", 
      "parameters": [
        {
          "doc": "node to get texture from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "spine scene id", 
          "name": "spine_scene", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the spine scene of a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_spine_scene"
    }, 
    {
      "replaces": "", 
      "description": "Sets the spine skin on a spine node.", 
      "parameters": [
        {
          "doc": "node to set the spine skin on", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "spine skin id", 
          "name": "spine_skin", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "optional slot id to only change a specific slot", 
          "name": "[spine_slot]", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the spine skin", 
      "examples": "Change skin of a Spine node\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_spine_skin</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">spine_node&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"s\">monster&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\nChange only part of the Spine to a different skin.\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">monster_transform_arm</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- The player is transforming into a monster, begin with changing the arm.</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_spine_skin</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">spine_node&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"s\">monster&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">left_arm_slot&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_spine_skin"
    }, 
    {
      "replaces": "", 
      "description": "Gets the playing animation on a spine node", 
      "parameters": [
        {
          "doc": "node to get spine skin from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "spine animation id, 0 if no animation is playing", 
          "name": "id", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the playing animation on a spine node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_spine_animation"
    }, 
    {
      "replaces": "", 
      "description": "Gets the spine skin of a spine node", 
      "parameters": [
        {
          "doc": "node to get spine skin from", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "spine skin id, 0 if no explicit skin is set", 
          "name": "id", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the skin of a spine node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_spine_skin"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful for spine nodes. The cursor is normalized.", 
      "parameters": [
        {
          "doc": "spine node to set the cursor for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "cursor value", 
          "name": "cursor", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the normalized cursor of the animation on a spine node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_spine_cursor"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful for spine nodes. Gets the normalized cursor of the animation on a spine node.", 
      "parameters": [
        {
          "doc": "spine node to get the cursor for (node)", 
          "name": "node", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "value <span class=\"type\">number</span> cursor value", 
          "name": "cursor", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the normalized cursor of the animation on a spine node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_spine_cursor"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful nodes with flipbook animations. Gets the normalized cursor of the flipbook animation on a node.", 
      "parameters": [
        {
          "doc": "node to get the cursor for (node)", 
          "name": "node", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "value <span class=\"type\">number</span> cursor value", 
          "name": "cursor", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the normalized cursor of the animation on a node with flipbook animation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_flipbook_cursor"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful nodes with flipbook animations. The cursor is normalized.", 
      "parameters": [
        {
          "doc": "node to set the cursor for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "cursor value", 
          "name": "cursor", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the normalized cursor of the animation on a node with flipbook animation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_flipbook_cursor"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful nodes with flipbook animations. Gets the playback rate of the flipbook animation on a node.", 
      "parameters": [
        {
          "doc": "node to set the cursor for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "playback rate", 
          "name": "rate", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the playback rate of the flipbook animation on a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_flipbook_playback_rate"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful nodes with flipbook animations. Sets the playback rate of the flipbook animation on a node. Must be positive.", 
      "parameters": [
        {
          "doc": "node to set the cursor for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "playback rate", 
          "name": "playback_rate", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the playback rate of the flipbook animation on a node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_flipbook_playback_rate"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful for spine nodes. Sets the playback rate of the animation on a spine node. Must be positive.", 
      "parameters": [
        {
          "doc": "spine node to set the cursor for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "playback rate", 
          "name": "playback_rate", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the playback rate of the animation on a spine node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_spine_playback_rate"
    }, 
    {
      "replaces": "", 
      "description": "This is only useful for spine nodes. Gets the playback rate of the animation on a spine node.", 
      "parameters": [
        {
          "doc": "spine node to set the cursor for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "playback rate", 
          "name": "rate", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the playback rate of the animation on a spine node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_spine_playback_rate"
    }, 
    {
      "replaces": "", 
      "description": "Dynamically create a particle fx node.", 
      "parameters": [
        {
          "doc": "node position", 
          "name": "pos", 
          "types": [
            "vector3", 
            "vector4"
          ]
        }, 
        {
          "doc": "particle fx resource name", 
          "name": "particlefx", 
          "types": [
            "hash", 
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "new particle fx node", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "notes": [], 
      "brief": "creates a new particle fx node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.new_particlefx_node"
    }, 
    {
      "replaces": "", 
      "description": "Plays the paricle fx for a gui node", 
      "parameters": [
        {
          "doc": "node to play particle fx for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "optional callback function that will be called when an emitter attached to this particlefx changes state.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object</dd>\n<dt><code>node</code></dt>\n<dd><span class=\"type\">hash</span> The particle fx node, or <code>nil</code> if the node was deleted</dd>\n<dt><code>emitter</code></dt>\n<dd><span class=\"type\">hash</span> The id of the emitter</dd>\n<dt><code>state</code></dt>\n<dd><span class=\"type\">constant</span> the new state of the emitter:</dd>\n</dl>\n<ul>\n<li><code>particlefx.EMITTER_STATE_SLEEPING</code></li>\n<li><code>particlefx.EMITTER_STATE_PRESPAWN</code></li>\n<li><code>particlefx.EMITTER_STATE_SPAWNING</code></li>\n<li><code>particlefx.EMITTER_STATE_POSTSPAWN</code></li>\n</ul>", 
          "name": "[emitter_state_function]", 
          "types": [
            "function(self, node, emitter, state)"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Plays a particle fx", 
      "examples": "How to play a particle fx when a gui node is created.\nThe callback receives the gui node, the hash of the id\nof the emitter, and the new state of the emitter as particlefx.EMITTER_STATE_<STATE>.\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">emitter_state_change</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">emitter</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">emitter</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">exhaust&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">particlefx</span><span class=\"p\">.</span><span class=\"n\">EMITTER_STATE_POSTSPAWN</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- exhaust is done spawning particles...</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_particlefx</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">particlefx&quot;</span><span class=\"p\">),</span> <span class=\"n\">emitter_state_change</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.play_particlefx"
    }, 
    {
      "replaces": "", 
      "description": "Stops the particle fx for a gui node", 
      "parameters": [
        {
          "doc": "node to stop particle fx for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Stops a particle fx", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.stop_particlefx"
    }, 
    {
      "replaces": "", 
      "description": "Set the paricle fx for a gui node", 
      "parameters": [
        {
          "doc": "node to set particle fx for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "particle fx id", 
          "name": "particlefx", 
          "types": [
            "hash", 
            "string"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Sets a particle fx", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_particlefx"
    }, 
    {
      "replaces": "", 
      "description": "Get the paricle fx for a gui node", 
      "parameters": [
        {
          "doc": "node to get particle fx for", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "particle fx id", 
          "name": "", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Gets a particle fx", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_particlefx"
    }, 
    {
      "replaces": "", 
      "description": "gets the node inherit alpha state", 
      "parameters": [
        {
          "doc": "node from which to get the inherit alpha state", 
          "name": "node", 
          "types": [
            "node"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "gets the node inherit alpha state", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.get_inherit_alpha"
    }, 
    {
      "replaces": "", 
      "description": "sets the node inherit alpha state", 
      "parameters": [
        {
          "doc": "node from which to set the inherit alpha state", 
          "name": "node", 
          "types": [
            "node"
          ]
        }, 
        {
          "doc": "true or false", 
          "name": "inherit_alpha", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the node inherit alpha state", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "gui.set_inherit_alpha"
    }, 
    {
      "replaces": "", 
      "description": "position property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "position property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_POSITION"
    }, 
    {
      "replaces": "", 
      "description": "rotation property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "rotation property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_ROTATION"
    }, 
    {
      "replaces": "", 
      "description": "scale property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "scale property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_SCALE"
    }, 
    {
      "replaces": "", 
      "description": "color property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "color property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_COLOR"
    }, 
    {
      "replaces": "", 
      "description": "outline color property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "outline color property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_OUTLINE"
    }, 
    {
      "replaces": "", 
      "description": "shadow color property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "shadow color property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_SHADOW"
    }, 
    {
      "replaces": "", 
      "description": "size property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "size property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_SIZE"
    }, 
    {
      "replaces": "", 
      "description": "fill_angle property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "fill_angle property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_FILL_ANGLE"
    }, 
    {
      "replaces": "", 
      "description": "inner_radius property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "inner_radius property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_INNER_RADIUS"
    }, 
    {
      "replaces": "", 
      "description": "slice9 property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "slice9 property", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PROP_SLICE9"
    }, 
    {
      "replaces": "", 
      "description": "alpha blending", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "alpha blending", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.BLEND_ALPHA"
    }, 
    {
      "replaces": "", 
      "description": "additive blending", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "additive blending", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.BLEND_ADD"
    }, 
    {
      "replaces": "", 
      "description": "additive alpha blending", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "additive alpha blending", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.BLEND_ADD_ALPHA"
    }, 
    {
      "replaces": "", 
      "description": "multiply blending", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "multiply blending", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.BLEND_MULT"
    }, 
    {
      "replaces": "", 
      "description": "clipping mode none", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "clipping mode none", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.CLIPPING_MODE_NONE"
    }, 
    {
      "replaces": "", 
      "description": "clipping mode stencil", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "clipping mode stencil", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.CLIPPING_MODE_STENCIL"
    }, 
    {
      "replaces": "", 
      "description": "left x-anchor", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "left x-anchor", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.ANCHOR_LEFT"
    }, 
    {
      "replaces": "", 
      "description": "right x-anchor", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "right x-anchor", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.ANCHOR_RIGHT"
    }, 
    {
      "replaces": "", 
      "description": "top y-anchor", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "top y-anchor", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.ANCHOR_TOP"
    }, 
    {
      "replaces": "", 
      "description": "bottom y-anchor", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "bottom y-anchor", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.ANCHOR_BOTTOM"
    }, 
    {
      "replaces": "", 
      "description": "no anchor", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "no anchor", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.ANCHOR_NONE"
    }, 
    {
      "replaces": "", 
      "description": "center pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "center pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_CENTER"
    }, 
    {
      "replaces": "", 
      "description": "north pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "north pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_N"
    }, 
    {
      "replaces": "", 
      "description": "north-east pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "north-east pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_NE"
    }, 
    {
      "replaces": "", 
      "description": "east pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "east pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_E"
    }, 
    {
      "replaces": "", 
      "description": "south-east pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "south-east pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_SE"
    }, 
    {
      "replaces": "", 
      "description": "south pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "south pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_S"
    }, 
    {
      "replaces": "", 
      "description": "south-west pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "south-west pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_SW"
    }, 
    {
      "replaces": "", 
      "description": "west pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "west pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_W"
    }, 
    {
      "replaces": "", 
      "description": "north-west pivot", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "north-west pivot", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIVOT_NW"
    }, 
    {
      "replaces": "", 
      "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe fit mode ensures that the entire node is visible in the adjusted gui scene.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "fit adjust mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.ADJUST_FIT"
    }, 
    {
      "replaces": "", 
      "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe zoom mode ensures that the node fills its entire area and might make the node exceed it.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "zoom adjust mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.ADJUST_ZOOM"
    }, 
    {
      "replaces": "", 
      "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe stretch mode ensures that the node is displayed as is in the adjusted gui scene, which might scale it non-uniformally.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "stretch adjust mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.ADJUST_STRETCH"
    }, 
    {
      "replaces": "", 
      "description": "elliptical pie node bounds", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "elliptical pie node bounds", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIEBOUNDS_ELLIPSE"
    }, 
    {
      "replaces": "", 
      "description": "rectangular pie node bounds", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "rectangular pie node bounds", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.PIEBOUNDS_RECTANGLE"
    }, 
    {
      "replaces": "", 
      "description": "The size of the node is determined by the size set in the editor, the constructor or by gui.set_size()", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "manual size mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.SIZE_MODE_MANUAL"
    }, 
    {
      "replaces": "", 
      "description": "The size of the node is determined by the currently assigned texture.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "automatic size mode", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.SIZE_MODE_AUTO"
    }, 
    {
      "replaces": "", 
      "description": "The texture id already exists when trying to use gui.new_texture().", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "texture already exists", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.RESULT_TEXTURE_ALREADY_EXISTS"
    }, 
    {
      "replaces": "", 
      "description": "The system is out of resources, for instance when trying to create a new\ntexture using gui.new_texture().", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out of resource", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.RESULT_OUT_OF_RESOURCES"
    }, 
    {
      "replaces": "", 
      "description": "The provided data is not in the expected format or is in some other way\nincorrect, for instance the image data provided to gui.new_texture().", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "data error", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "gui.RESULT_DATA_ERROR"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine when a gui component is initialized. It can be used\nto set the initial state of the script and gui scene.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called when a gui component is initialized", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- set up useful data</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "init"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine when a gui component is finalized (destroyed). It can\nbe used to e.g. take some last action, report the finalization to other game object instances\nor release user input focus (see <code>release_input_focus</code>). There is no use in starting any animations or similar\nfrom this function since the gui component is about to be destroyed.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called when a gui component is finalized", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">final</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- report finalization</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_friend_instance&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">im_dead&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">my_stats</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">some_value</span><span class=\"p\">})</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "final"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine every frame to update the state of a gui component.\nIt can be used to perform any kind of gui related tasks, e.g. animating nodes.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }, 
        {
          "doc": "the time-step of the frame update", 
          "name": "dt", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called every frame to update the gui component", 
      "examples": "This example demonstrates how to update a text node that displays game score in a counting fashion.\nIt is assumed that the gui component receives messages from the game when a new score is to be shown.\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fetch the score text node for later use (assumes it is called &quot;score&quot;)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">score&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- keep track of the current score counted up so far</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\">-- keep track of the target score we should count up to</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\">-- how fast we will update the score, in score/second</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_update_speed</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check if target score is more than current score</span>\n    <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">&lt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span>\n        <span class=\"c1\">-- increment current score according to the speed</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">+</span> <span class=\"n\">dt</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_update_speed</span>\n        <span class=\"c1\">-- check if we went past the target score, clamp current score in that case</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">&gt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"k\">then</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span>\n        <span class=\"k\">end</span>\n        <span class=\"c1\">-- update the score text node</span>\n        <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">&quot;</span> <span class=\"o\">..</span> <span class=\"nb\">math.floor</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check the message</span>\n    <span class=\"k\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">set_score&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">score</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "update"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine whenever a message has been sent to the gui component.\nIt can be used to take action on the message, e.g. update the gui or send a response back to the sender of the message.\nThe <code>message</code> parameter is a table containing the message data. If the message is sent from the engine, the\ndocumentation of the message specifies which data is supplied.\nSee the <a href=\"#update\">update</a> function for examples on how to use this callback-function.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }, 
        {
          "doc": "id of the received message", 
          "name": "message_id", 
          "types": [
            "hash"
          ]
        }, 
        {
          "doc": "a table containing the message data", 
          "name": "message", 
          "types": [
            "table"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called when a message has been sent to the gui component", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "on_message"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine when user input is sent to the instance of the gui component.\nIt can be used to take action on the input, e.g. modify the gui according to the input.\nFor an instance to obtain user input, it must first acquire input\nfocus through the message <code>acquire_input_focus</code>.\nAny instance that has obtained input will be put on top of an\ninput stack. Input is sent to all listeners on the stack until the\nend of stack is reached, or a listener returns <code>true</code>\nto signal that it wants input to be consumed.\nSee the documentation of <a href=\"/ref/go/#acquire_input_focus\">acquire_input_focus</a> for more\ninformation.\nThe <code>action</code> parameter is a table containing data about the input mapped to the\n<code>action_id</code>.\nFor mapped actions it specifies the value of the input and if it was just pressed or released.\nActions are mapped to input in an input_binding-file.\nMouse movement is specifically handled and uses <code>nil</code> as its <code>action_id</code>.\nThe <code>action</code> only contains positional parameters in this case, such as x and y of the pointer.\nHere is a brief description of the available table fields:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>value</code></td>\n<td>The amount of input given by the user. This is usually 1 for buttons and 0-1 for analogue inputs. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>If the input was pressed this frame. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>released</code></td>\n<td>If the input was released this frame. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>repeated</code></td>\n<td>If the input was repeated this frame. This is similar to how a key on a keyboard is repeated when you hold it down. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>The x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>The y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_x</code></td>\n<td>The screen space x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_y</code></td>\n<td>The screen space y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>dx</code></td>\n<td>The change in x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>dy</code></td>\n<td>The change in y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_dx</code></td>\n<td>The change in screen space x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_dy</code></td>\n<td>The change in screen space y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>gamepad</code></td>\n<td>The index of the gamepad device that provided the input.</td>\n</tr>\n<tr>\n<td><code>touch</code></td>\n<td>List of touch input, one element per finger, if present. See table below about touch input</td>\n</tr>\n</tbody>\n</table>\nTouch input table:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>id</code></td>\n<td>A number identifying the touch input during its duration.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>True if the finger was pressed this frame.</td>\n</tr>\n<tr>\n<td><code>released</code></td>\n<td>True if the finger was released this frame.</td>\n</tr>\n<tr>\n<td><code>tap_count</code></td>\n<td>Number of taps, one for single, two for double-tap, etc</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>The x touch location.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>The y touch location.</td>\n</tr>\n<tr>\n<td><code>dx</code></td>\n<td>The change in x value.</td>\n</tr>\n<tr>\n<td><code>dy</code></td>\n<td>The change in y value.</td>\n</tr>\n<tr>\n<td><code>acc_x</code></td>\n<td>Accelerometer x value (if present).</td>\n</tr>\n<tr>\n<td><code>acc_y</code></td>\n<td>Accelerometer y value (if present).</td>\n</tr>\n<tr>\n<td><code>acc_z</code></td>\n<td>Accelerometer z value (if present).</td>\n</tr>\n</tbody>\n</table>", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }, 
        {
          "doc": "id of the received input action, as mapped in the input_binding-file", 
          "name": "action_id", 
          "types": [
            "hash"
          ]
        }, 
        {
          "doc": "a table containing the input data, see above for a description", 
          "name": "action", 
          "types": [
            "table"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "optional boolean to signal if the input should be consumed (not passed on to others) or not, default is false", 
          "name": "[consume]", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "called when user input is received", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">on_input</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">action_id</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for input</span>\n    <span class=\"k\">if</span> <span class=\"n\">action_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_action&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- take appropritate action</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">value</span>\n    <span class=\"k\">end</span>\n    <span class=\"c1\">-- consume input</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "on_input"
    }, 
    {
      "replaces": "", 
      "description": "\nThis is a callback-function, which is called by the engine when the gui script is reloaded, e.g. from the editor.\nIt can be used for live development, e.g. to tweak constants or set up the state properly for the script.\n", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called when the gui script is reloaded", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">on_reload</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- restore some color (or similar)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_node&quot;</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_original_color</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "on_reload"
    }, 
    {
      "replaces": "", 
      "description": "This message is broadcast to every GUI component when a layout change has been initiated\non device.", 
      "parameters": [
        {
          "doc": "the id of the layout the engine is changing to", 
          "name": "id", 
          "types": [
            "hash"
          ]
        }, 
        {
          "doc": "the id of the layout the engine is changing from", 
          "name": "previous_id", 
          "types": [
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "reports a layout change", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n   <span class=\"k\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">layout_changed&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Landscape&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n       <span class=\"c1\">-- switching layout to &quot;Landscape&quot;...</span>\n       <span class=\"o\">...</span>\n   <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MESSAGE", 
      "name": "layout_changed"
    }
  ]
}