{
  "info": {
    "group": "DEFOLD SDK", 
    "description": "API for platform independent mutex synchronization primitive.", 
    "namespace": "dmMutex", 
    "brief": "SDK Mutex API documentation", 
    "file": "dmsdk/dlib/mutex.h", 
    "path": "engine/dlib/src/dmsdk/dlib/mutex.h", 
    "name": "Mutex"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">Mutex</span><span class=\"o\">*</span> <span class=\"n\">HMutex</span><span class=\"p\">;</span>\n</pre></div>", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "HMutex type definition", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "dmMutex::HMutex"
    }, 
    {
      "replaces": "", 
      "description": "Creates a new HMutex.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "A new Mutex handle.", 
          "name": "mutex", 
          "types": [
            "dmMutex::HMutex"
          ]
        }
      ], 
      "notes": [], 
      "brief": "create Mutex", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmMutex::New"
    }, 
    {
      "replaces": "", 
      "description": "Deletes a HMutex.", 
      "parameters": [
        {
          "doc": "Mutex handle to delete.", 
          "name": "mutex", 
          "types": [
            "dmMutex::HMutex"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "delete Mutex.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmMutex::Delete"
    }, 
    {
      "replaces": "", 
      "description": "Lock a HMutex, will block until mutex is unlocked if already locked elsewhere.", 
      "parameters": [
        {
          "doc": "Mutex handle to lock.", 
          "name": "mutex", 
          "types": [
            "dmMutex::HMutex"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "lock Mutex.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmMutex::Lock"
    }, 
    {
      "replaces": "", 
      "description": "Tries to lock a HMutex, if mutex is already locked it will return false and\ncontinue without locking the mutex.", 
      "parameters": [
        {
          "doc": "Mutex handle to lock.", 
          "name": "mutex", 
          "types": [
            "dmMutex::HMutex"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "True if mutex was successfully locked, false otherwise.", 
          "name": "result", 
          "types": [
            "bool"
          ]
        }
      ], 
      "notes": [], 
      "brief": "non-blocking lock of Mutex.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmMutex::TryLock"
    }, 
    {
      "replaces": "", 
      "description": "Unlock a HMutex.", 
      "parameters": [
        {
          "doc": "Mutex handle to unlock.", 
          "name": "mutex", 
          "types": [
            "dmMutex::HMutex"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "unlock Mutex.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmMutex::Unlock"
    }, 
    {
      "replaces": "", 
      "description": "Will lock a Mutex and automatically unlock it at the end of the scope.", 
      "parameters": [
        {
          "doc": "Mutex handle to lock.", 
          "name": "mutex", 
          "types": [
            "dmMutex::HMutex"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "macro for scope lifetime Mutex locking", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MACRO", 
      "name": "DM_MUTEX_SCOPED_LOCK"
    }
  ]
}