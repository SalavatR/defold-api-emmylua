{
  "info": {
    "description": "<span class=\"file\">&lt;dmsdk/dlib/thread.h&gt;</span>\nThread functions.", 
    "namespace": "dmThread", 
    "brief": "SDK Thread API documentation", 
    "file": "", 
    "path": "", 
    "name": "Thread"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "Create a new named thread", 
      "parameters": [
        {
          "doc": "Thread entry function", 
          "name": "thread_start", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Stack size", 
          "name": "stack_size", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Thread argument", 
          "name": "arg", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Thread name", 
          "name": "name", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "handle", 
          "name": "Thread", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "create a new thread", 
      "examples": "Create a thread\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;dmsdk/sdk.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Context</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">m_DoWork</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>  <span class=\"n\">m_Work</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">Worker</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">_ctx</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Context</span><span class=\"o\">*</span> <span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">_ctx</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">m_DoWork</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">m_Work</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// do work</span>\n        <span class=\"n\">dmTime</span><span class=\"o\">::</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"mi\">1000</span><span class=\"p\">);</span> <span class=\"c1\">// yield</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">StartThread</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Context</span> <span class=\"n\">ctx</span><span class=\"p\">;</span>\n    <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_DoWork</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Work</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">dmThread</span><span class=\"o\">::</span><span class=\"n\">Thread</span> <span class=\"kr\">thread</span> <span class=\"o\">=</span> <span class=\"n\">dmThread</span><span class=\"o\">::</span><span class=\"n\">New</span><span class=\"p\">(</span><span class=\"n\">Worker</span><span class=\"p\">,</span> <span class=\"mh\">0x80000</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"s\">&quot;my_thread&quot;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// do other work...</span>\n    <span class=\"c1\">// ..eventually stop the thread:</span>\n    <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_DoWork</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// wait for thread</span>\n    <span class=\"n\">dmThread</span><span class=\"o\">::</span><span class=\"n\">Join</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;work done: %d</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Work</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::New"
    }, 
    {
      "replaces": "", 
      "description": "Join thread. Waits for the thread specified by thread to terminate.  If\nthat thread has already terminated, then Join() returns immediately.  The\nthread specified by thread must be joinable (see Detach()).", 
      "parameters": [
        {
          "doc": "Thread to join", 
          "name": "thread", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "join thread", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::Join"
    }, 
    {
      "replaces": "", 
      "description": "Detach thread. When a detached thread terminates, its resources are\nautomatically released back to the system without the need for another\nthread to join with the terminated thread.", 
      "parameters": [
        {
          "doc": "Thread to detach", 
          "name": "thread", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "detach thread", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::Detach"
    }, 
    {
      "replaces": "", 
      "description": "Allocate thread local storage key", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "", 
          "name": "Key", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "allocate thread local storage key", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::AllocTls"
    }, 
    {
      "replaces": "", 
      "description": "Free thread local storage key", 
      "parameters": [
        {
          "doc": "Key", 
          "name": "key", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "free thread local storage key", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::FreeTls"
    }, 
    {
      "replaces": "", 
      "description": "Set thread specific data", 
      "parameters": [
        {
          "doc": "Key", 
          "name": "key", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Value", 
          "name": "value", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set thread specific data", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::SetTlsValue"
    }, 
    {
      "replaces": "", 
      "description": "Get thread specific data", 
      "parameters": [
        {
          "doc": "Key", 
          "name": "key", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "get thread specific data", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::GetTlsValue"
    }, 
    {
      "replaces": "", 
      "description": "Gets the current thread", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "current thread", 
          "name": "the", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the current thread", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::GetCurrentThread"
    }, 
    {
      "replaces": "", 
      "description": "Sets the current thread name", 
      "parameters": [
        {
          "doc": "the thread", 
          "name": "thread", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "the thread name", 
          "name": "name", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the current thread name", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmThread::SetThreadName"
    }
  ]
}