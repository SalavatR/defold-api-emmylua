{
  "info": {
    "group": "SYSTEM", 
    "description": "Functions and constants to access resources.", 
    "namespace": "resource", 
    "brief": "Resource API documentation", 
    "file": "", 
    "path": "", 
    "name": "Resource"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.", 
      "parameters": [
        {
          "doc": "optional resource path string to the resource", 
          "name": "[path]", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a path hash to the binary version of the resource", 
          "name": "path", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "reference to material resource", 
      "examples": "Load a material and set it to a sprite:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_material&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">material</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/material.material&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">material&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_material</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.material"
    }, 
    {
      "replaces": "", 
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.", 
      "parameters": [
        {
          "doc": "optional resource path string to the resource", 
          "name": "[path]", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a path hash to the binary version of the resource", 
          "name": "path", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "reference to font resource", 
      "examples": "Load a font and set it to a label:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_font&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/font.font&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#label&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">font&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_font</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\nLoad a font and set it to a gui:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_font&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/font.font&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">fonts&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_font</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"s\">my_font&quot;</span><span class=\"p\">})</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.font"
    }, 
    {
      "replaces": "", 
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.", 
      "parameters": [
        {
          "doc": "optional resource path string to the resource", 
          "name": "[path]", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a path hash to the binary version of the resource", 
          "name": "path", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "reference to texture resource", 
      "examples": "Load a texture and set it to a model:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_texture&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/texture.png&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">texture0&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_texture</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.texture"
    }, 
    {
      "replaces": "", 
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.", 
      "parameters": [
        {
          "doc": "optional resource path string to the resource", 
          "name": "[path]", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a path hash to the binary version of the resource", 
          "name": "path", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "reference to atlas resource", 
      "examples": "Load an atlas and set it to a sprite:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_atlas&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/atlas.atlas&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">image&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_atlas</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\nLoad an atlas and set it to a gui:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_atlas&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/atlas.atlas&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">textures&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_atlas</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"s\">my_atlas&quot;</span><span class=\"p\">})</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.atlas"
    }, 
    {
      "replaces": "", 
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.", 
      "parameters": [
        {
          "doc": "optional resource path string to the resource", 
          "name": "[path]", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a path hash to the binary version of the resource", 
          "name": "path", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "reference to buffer resource", 
      "examples": "Set a unique buffer it to a sprite:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_buffer&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/cube.buffer&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#mesh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">vertices&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_buffer</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.buffer"
    }, 
    {
      "replaces": "", 
      "description": "Constructor-like function with two purposes:\n<ul>\n<li>Load the specified resource as part of loading the script</li>\n<li>Return a hash to the run-time version of the resource</li>\n</ul>\n<span class=\"icon-attention\"></span> This function can only be called within <a href=\"/ref/go#go.property\">go.property</a> function calls.", 
      "parameters": [
        {
          "doc": "optional resource path string to the resource", 
          "name": "[path]", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a path hash to the binary version of the resource", 
          "name": "path", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "reference to tile source resource", 
      "examples": "Load tile source and set it to a tile map:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_tile_source&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">tile_source</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/tilesource.tilesource&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#tilemap&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">tile_source&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_tile_source</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.tile_source"
    }, 
    {
      "replaces": "", 
      "description": "Sets the resource data for a specific resource", 
      "parameters": [
        {
          "doc": "The path to the resource", 
          "name": "path", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "The buffer of precreated data, suitable for the intended resource type", 
          "name": "buffer", 
          "types": [
            "buffer"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Set a resource", 
      "examples": "Assuming the folder \"/res\" is added to the project custom resources:\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- load a texture resource and set it on a sprite</span>\n<span class=\"kd\">local</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/res/new.texturec&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">texture0&quot;</span><span class=\"p\">),</span> <span class=\"n\">buffer</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.set"
    }, 
    {
      "replaces": "", 
      "description": "Loads the resource data for a specific resource.", 
      "parameters": [
        {
          "doc": "The path to the resource", 
          "name": "path", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "Returns the buffer stored on disc", 
          "name": "buffer", 
          "types": [
            "buffer"
          ]
        }
      ], 
      "notes": [], 
      "brief": "load a resource", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- read custom resource data into buffer</span>\n<span class=\"kd\">local</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/resources/datafile&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n\nIn order for the engine to include custom resources in the build process, you need\nto specify them in the \"game.project\" settings file:\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[project]</span>\n<span class=\"na\">title</span> <span class=\"o\">=</span> <span class=\"s\">My project</span>\n<span class=\"na\">version</span> <span class=\"o\">=</span> <span class=\"s\">0.1</span>\n<span class=\"na\">custom_resources</span> <span class=\"o\">=</span> <span class=\"s\">resources/,assets/level_data.json</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.load"
    }, 
    {
      "replaces": "", 
      "description": "Sets the pixel data for a specific texture.", 
      "parameters": [
        {
          "doc": "The path to the resource", 
          "name": "path", 
          "types": [
            "hash", 
            "string"
          ]
        }, 
        {
          "doc": "A table containing info about the texture. Supported entries:\n<dl>\n<dt><code>type</code></dt>\n<dd><span class=\"type\">number</span> The texture type. Supported values:</dd>\n</dl>\n<ul>\n<li><code>resource.TEXTURE_TYPE_2D</code></li>\n</ul>\n<dl>\n<dt><code>width</code></dt>\n<dd><span class=\"type\">number</span> The width of the texture (in pixels)</dd>\n<dt><code>height</code></dt>\n<dd><span class=\"type\">number</span> The width of the texture (in pixels)</dd>\n<dt><code>format</code></dt>\n<dd><span class=\"type\">number</span> The texture format. Supported values:</dd>\n</dl>\n<ul>\n<li><code>resource.TEXTURE_FORMAT_LUMINANCE</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGB</code></li>\n<li><code>resource.TEXTURE_FORMAT_RGBA</code></li>\n</ul>", 
          "name": "table", 
          "types": [
            "table"
          ]
        }, 
        {
          "doc": "The buffer of precreated pixel data\n<span class=\"icon-attention\"></span> Currently, only 1 mipmap is generated.", 
          "name": "buffer", 
          "types": [
            "buffer"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set a texture", 
      "examples": "How to set all pixels of an atlas\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">VALUE_TYPE_UINT8</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">)</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">rgb&quot;</span><span class=\"p\">))</span>\n\n  <span class=\"k\">for</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"k\">do</span>\n      <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"k\">do</span>\n          <span class=\"kd\">local</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0xff</span>\n          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0x80</span>\n          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0x10</span>\n      <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"kd\">local</span> <span class=\"n\">resource_path</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#sprite&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">texture0&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_TYPE_2D</span><span class=\"p\">,</span> <span class=\"n\">format</span><span class=\"o\">=</span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_FORMAT_RGB</span><span class=\"p\">,</span> <span class=\"n\">num_mip_maps</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"p\">}</span>\n  <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span> <span class=\"n\">resource_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buffer</span> <span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.set_texture"
    }, 
    {
      "replaces": "", 
      "description": "Update internal sound resource (wavc/oggc) with new data", 
      "parameters": [
        {
          "doc": "The path to the resource", 
          "name": "path", 
          "types": [
            "hash", 
            "string"
          ]
        }, 
        {
          "doc": "A lua string containing the binary sound data", 
          "name": "buffer", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Update internal sound resource", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.set_sound"
    }, 
    {
      "replaces": "", 
      "description": "gets the buffer from a resource", 
      "parameters": [
        {
          "doc": "The path to the resource", 
          "name": "path", 
          "types": [
            "hash", 
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The resource buffer", 
          "name": "buffer", 
          "types": [
            "buffer"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get resource buffer", 
      "examples": "How to get the data from a buffer\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">res_path</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#mesh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">vertices&quot;</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_buffer</span><span class=\"p\">(</span><span class=\"n\">res_path</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">stream_positions</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">position&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">#</span><span class=\"n\">stream_positions</span> <span class=\"k\">do</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">stream_positions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.get_buffer"
    }, 
    {
      "replaces": "", 
      "description": "sets the buffer of a resource", 
      "parameters": [
        {
          "doc": "The path to the resource", 
          "name": "path", 
          "types": [
            "hash", 
            "string"
          ]
        }, 
        {
          "doc": "The resource buffer", 
          "name": "buffer", 
          "types": [
            "buffer"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set resource buffer", 
      "examples": "How to set the data from a buffer\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">fill_stream</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">verts</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">verts</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">stream</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">verts</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">res_path</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#mesh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">vertices&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">positions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n         <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n         <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n         <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">num_verts</span> <span class=\"o\">=</span> <span class=\"o\">#</span><span class=\"n\">positions</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n\n    <span class=\"c1\">-- create a new buffer</span>\n    <span class=\"kd\">local</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">num_verts</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"p\">{</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">position&quot;</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">VALUE_TYPE_FLOAT32</span><span class=\"p\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"kd\">local</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_buffer</span><span class=\"p\">(</span><span class=\"n\">res_path</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">stream_positions</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">get_stream</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">position&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fill_stream</span><span class=\"p\">(</span><span class=\"n\">stream_positions</span><span class=\"p\">,</span> <span class=\"n\">positions</span><span class=\"p\">)</span>\n\n    <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">set_buffer</span><span class=\"p\">(</span><span class=\"n\">res_path</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.set_buffer"
    }, 
    {
      "replaces": "", 
      "description": "Gets the text metrics from a font", 
      "parameters": [
        {
          "doc": "the font to get the (unscaled) metrics from", 
          "name": "url", 
          "types": [
            "hash"
          ]
        }, 
        {
          "doc": "text to measure", 
          "name": "text", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "A table containing parameters for the text. Supported entries:\n<dl>\n<dt><code>width</code></dt>\n<dd><span class=\"type\">integer</span> The width of the text field. Not used if <code>line_break</code> is false.</dd>\n<dt><code>leading</code></dt>\n<dd><span class=\"type\">number</span> The leading (default 1.0)</dd>\n<dt><code>tracking</code></dt>\n<dd><span class=\"type\">number</span> The leading (default 0.0)</dd>\n<dt><code>line_break</code></dt>\n<dd><span class=\"type\">boolean</span> If the calculation should consider line breaks (default false)</dd>\n</dl>", 
          "name": "[options]", 
          "types": [
            "table"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "a table with the following fields:\n<ul>\n<li>width</li>\n<li>height</li>\n<li>max_ascent</li>\n<li>max_descent</li>\n</ul>", 
          "name": "metrics", 
          "types": [
            "table"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the text metrics for a font", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">font</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#label&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">font&quot;</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_text_metrics</span><span class=\"p\">(</span><span class=\"n\">font</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">The quick brown fox</span><span class=\"se\">\\n</span><span class=\"s\"> jumps over the lazy dog&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.get_text_metrics"
    }, 
    {
      "replaces": "", 
      "description": "2D texture type", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "2D texture type", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.TEXTURE_TYPE_2D"
    }, 
    {
      "replaces": "", 
      "description": "luminance type texture format", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "luminance type texture format", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.TEXTURE_FORMAT_LUMINANCE"
    }, 
    {
      "replaces": "", 
      "description": "RGB type texture format", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "RGB type texture format", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.TEXTURE_FORMAT_RGB"
    }, 
    {
      "replaces": "", 
      "description": "RGBA type texture format", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "RGBA type texture format", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.TEXTURE_FORMAT_RGBA"
    }, 
    {
      "replaces": "", 
      "description": "LIVEUPDATE_OK", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "LIVEUPDATE_OK", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.LIVEUPDATE_OK"
    }, 
    {
      "replaces": "", 
      "description": "The handled resource is invalid.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "LIVEUPDATE_INVALID_RESOURCE", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.LIVEUPDATE_INVALID_RESOURCE"
    }, 
    {
      "replaces": "", 
      "description": "Mismatch between manifest expected version and actual version.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "LIVEUPDATE_VERSION_MISMATCH", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.LIVEUPDATE_VERSION_MISMATCH"
    }, 
    {
      "replaces": "", 
      "description": "Mismatch between running engine version and engine versions supported by manifest.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "LIVEUPDATE_ENGINE_VERSION_MISMATCH", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH"
    }, 
    {
      "replaces": "", 
      "description": "Mismatch between manifest expected signature and actual signature.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "LIVEUPDATE_SIGNATURE_MISMATCH", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.LIVEUPDATE_SIGNATURE_MISMATCH"
    }, 
    {
      "replaces": "", 
      "description": "Mismatch between scheme used to load resources. Resources are loaded with a different scheme than from manifest, for example over HTTP or directly from file. This is typically the case when running the game directly from the editor instead of from a bundle.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "LIVEUPDATE_SCHEME_MISMATCH", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.LIVEUPDATE_SCHEME_MISMATCH"
    }, 
    {
      "replaces": "", 
      "description": "Mismatch between between expected bundled resources and actual bundled resources. The manifest expects a resource to be in the bundle, but it was not found in the bundle. This is typically the case when a non-excluded resource was modified between publishing the bundle and publishing the manifest.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH"
    }, 
    {
      "replaces": "", 
      "description": "Failed to parse manifest data buffer. The manifest was probably produced by a different engine version.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "LIVEUPDATE_FORMAT_ERROR", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "resource.LIVEUPDATE_FORMAT_ERROR"
    }, 
    {
      "replaces": "", 
      "description": "Return a reference to the Manifest that is currently loaded.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "reference to the Manifest that is currently loaded", 
          "name": "manifest_reference", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "return a reference to the Manifest that is currently loaded", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.get_current_manifest"
    }, 
    {
      "replaces": "", 
      "description": "add a resource to the data archive and runtime index. The resource will be verified\ninternally before being added to the data archive.", 
      "parameters": [
        {
          "doc": "The manifest to check against.", 
          "name": "manifest_reference", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "The resource data that should be stored.", 
          "name": "data", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "The expected hash for the resource,\nretrieved through collectionproxy.missing_resources.", 
          "name": "hexdigest", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "The callback\nfunction that is executed once the engine has been attempted to store\nthe resource.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>hexdigest</code></dt>\n<dd><span class=\"type\">string</span> The hexdigest of the resource.</dd>\n<dt><code>status</code></dt>\n<dd><span class=\"type\">boolean</span> Whether or not the resource was successfully stored.</dd>\n</dl>", 
          "name": "callback", 
          "types": [
            "function(self, hexdigest, status)"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "add a resource to the data archive and runtime index", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">manifest</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_current_manifest</span><span class=\"p\">()</span>\n<span class=\"k\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">callback_store_resource</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">hexdigest</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"k\">then</span>\n          <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Successfully stored resource: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">hexdigest</span><span class=\"p\">)</span>\n     <span class=\"k\">else</span>\n          <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Failed to store resource: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">hexdigest</span><span class=\"p\">)</span>\n     <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">load_resources</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"n\">collectionproxy</span><span class=\"p\">.</span><span class=\"n\">missing_resources</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n     <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">resource_hash</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">resources</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n          <span class=\"kd\">local</span> <span class=\"n\">baseurl</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"s\">http://example.defold.com:8000/&quot;</span>\n          <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">baseurl</span> <span class=\"o\">..</span> <span class=\"n\">resource_hash</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">GET&quot;</span><span class=\"p\">,</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n               <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span> <span class=\"k\">then</span>\n                    <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">store_resource</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">manifest</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">resource_hash</span><span class=\"p\">,</span> <span class=\"n\">callback_store_resource</span><span class=\"p\">)</span>\n               <span class=\"k\">else</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Failed to download resource: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">resource_hash</span><span class=\"p\">)</span>\n               <span class=\"k\">end</span>\n          <span class=\"k\">end</span><span class=\"p\">)</span>\n     <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.store_resource"
    }, 
    {
      "replaces": "", 
      "description": "Create a new manifest from a buffer. The created manifest is verified\nby ensuring that the manifest was signed using the bundled public/private\nkey-pair during the bundle process and that the manifest supports the current\nrunning engine version. Once the manifest is verified it is stored on device.\nThe next time the engine starts (or is rebooted) it will look for the stored\nmanifest before loading resources. Storing a new manifest allows the\ndeveloper to update the game, modify existing resources, or add new\nresources to the game through LiveUpdate.", 
      "parameters": [
        {
          "doc": "the binary data that represents the manifest", 
          "name": "manifest_buffer", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "the callback function\nexecuted once the engine has attempted to store the manifest.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>status</code></dt>\n<dd><span class=\"type\">constant</span> the status of the store operation:</dd>\n</dl>\n<ul>\n<li><code>resource.LIVEUPATE_OK</code></li>\n<li><code>resource.LIVEUPATE_INVALID_RESOURCE</code></li>\n<li><code>resource.LIVEUPATE_VERSION_MISMATCH</code></li>\n<li><code>resource.LIVEUPATE_ENGINE_VERSION_MISMATCH</code></li>\n<li><code>resource.LIVEUPATE_SIGNATURE_MISMATCH</code></li>\n<li><code>resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH</code></li>\n<li><code>resource.LIVEUPDATE_FORMAT_ERROR</code></li>\n</ul>", 
          "name": "callback", 
          "types": [
            "function(self, status)"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "create, verify, and store a manifest to device", 
      "examples": "How to download a manifest with HTTP and store it on device.\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">store_manifest_cb</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">LIVEUPATE_OK</span> <span class=\"k\">then</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Successfully stored manifest. This manifest will be loaded instead of the bundled manifest the next time the engine starts.&quot;</span><span class=\"p\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Failed to store manifest&quot;</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">download_and_store_manifest</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">MANIFEST_URL</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">GET&quot;</span><span class=\"p\">,</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span> <span class=\"k\">then</span>\n        <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">store_manifest</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">store_manifest_cb</span><span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.store_manifest"
    }, 
    {
      "replaces": "", 
      "description": "Stores a zip file and uses it for live update content. The contents of the\nzip file will be verified against the manifest to ensure file integrity.\nIt is possible to opt out of the resource verification using an option passed\nto this function.\nThe path is stored in the (internal) live update location.", 
      "parameters": [
        {
          "doc": "the path to the original file on disc", 
          "name": "path", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "the callback function\nexecuted after the storage has completed\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>status</code></dt>\n<dd><span class=\"type\">constant</span> the status of the store operation (See resource.store_manifest)</dd>\n</dl>", 
          "name": "callback", 
          "types": [
            "function(self, status)"
          ]
        }, 
        {
          "doc": "optional table with extra parameters. Supported entries:\n<ul>\n<li><span class=\"type\">boolean</span> <code>verify</code>: if archive should be verified as well as stored (defaults to true)</li>\n</ul>", 
          "name": "[options]", 
          "types": [
            "table"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "register and store a live update zip file", 
      "examples": "How to download an archive with HTTP and store it on device.\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">LIVEUPDATE_URL</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">a</span> <span class=\"n\">file</span> <span class=\"n\">server</span> <span class=\"n\">url</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\">-- This can be anything, but you should keep the platform bundles apart</span>\n<span class=\"kd\">local</span> <span class=\"n\">ZIP_FILENAME</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"s\">defold.resourcepack.zip&#39;</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">APP_SAVE_DIR</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"s\">LiveUpdateDemo&quot;</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"s\">levels#level1&quot;</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">INIT: is_using_liveupdate_data:&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">is_using_liveupdate_data</span><span class=\"p\">())</span>\n    <span class=\"c1\">-- let&#39;s download the archive</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">attempt_download_archive&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\">-- helper function to store headers from the http request (e.g. the ETag)</span>\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">store_http_response_headers</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">get_save_file</span><span class=\"p\">(</span><span class=\"n\">APP_SAVE_DIR</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">load_http_response_headers</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">get_save_file</span><span class=\"p\">(</span><span class=\"n\">APP_SAVE_DIR</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\">-- returns headers that can potentially generate a 304</span>\n<span class=\"c1\">-- without redownloading the file again</span>\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">get_http_request_headers</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_http_response_headers</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"nb\">string.lower</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;</span><span class=\"s\">etag&#39;</span> <span class=\"k\">then</span>\n            <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"s\">If-None-Match&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">elseif</span> <span class=\"nb\">string.lower</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;</span><span class=\"s\">last-modified&#39;</span> <span class=\"k\">then</span>\n            <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"s\">If-Modified-Since&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">headers</span>\n<span class=\"k\">end</span>\n\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">store_archive_cb</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"kc\">true</span> <span class=\"k\">then</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Successfully stored live update archive!&quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">reboot</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Failed to store live update archive, &quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"c1\">-- remove the path</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">attempt_download_archive&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n\n        <span class=\"c1\">-- by supplying the ETag, we don&#39;t have to redownload the file again</span>\n        <span class=\"c1\">-- if we already have downloaded it.</span>\n        <span class=\"kd\">local</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">get_http_request_headers</span><span class=\"p\">(</span><span class=\"n\">ZIP_FILENAME</span> <span class=\"o\">..</span> <span class=\"s1\">&#39;</span><span class=\"s\">.json&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">is_using_liveupdate_data</span><span class=\"p\">()</span> <span class=\"k\">then</span>\n            <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span> <span class=\"c1\">-- live update data has been purged, and we need do a fresh download</span>\n        <span class=\"k\">end</span>\n\n        <span class=\"kd\">local</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">get_save_file</span><span class=\"p\">(</span><span class=\"n\">APP_SAVE_DIR</span><span class=\"p\">,</span> <span class=\"n\">ZIP_FILENAME</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"p\">,</span>        <span class=\"c1\">-- a temporary file on disc. will be removed upon successful liveupdate storage</span>\n            <span class=\"n\">ignore_cache</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"c1\">-- we don&#39;t want to store a (potentially large) duplicate in our http cache</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">local</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">LIVEUPDATE_URL</span> <span class=\"o\">..</span> <span class=\"n\">ZIP_FILENAME</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Downloading&quot;</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">GET&quot;</span><span class=\"p\">,</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">304</span> <span class=\"k\">then</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">%d: Archive zip file up-to-date&quot;</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">))</span>\n            <span class=\"k\">elseif</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span> <span class=\"ow\">and</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span>\n                <span class=\"c1\">-- register the path to the live update system</span>\n                <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">store_archive</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">store_archive_cb</span><span class=\"p\">)</span>\n                <span class=\"c1\">-- at this point, the &quot;path&quot; has been moved internally to a different location</span>\n\n                <span class=\"c1\">-- save the ETag for the next run</span>\n                <span class=\"n\">store_http_response_headers</span><span class=\"p\">(</span><span class=\"n\">ZIP_FILENAME</span> <span class=\"o\">..</span> <span class=\"s1\">&#39;</span><span class=\"s\">.json&#39;</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Error when downloading&quot;</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">to&quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">:&quot;</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">)</span>\n            <span class=\"k\">end</span>\n\n            <span class=\"c1\">-- If we got a 200, we would call store_archive_cb() then reboot</span>\n            <span class=\"c1\">-- Second time, if we get here, it should be after a 304, and then</span>\n            <span class=\"c1\">-- we can load the missing resources from the liveupdate archive</span>\n            <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">is_using_liveupdate_data</span><span class=\"p\">()</span> <span class=\"k\">then</span>\n                <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">proxy</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">load&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.store_archive"
    }, 
    {
      "replaces": "", 
      "description": "Is any liveupdate data mounted and currently in use?\nThis can be used to determine if a new manifest or zip file should be downloaded.", 
      "parameters": [], 
      "returnvalues": [
        {
          "doc": "true if a liveupdate archive (any format) has been loaded", 
          "name": "bool", 
          "types": [
            "bool"
          ]
        }
      ], 
      "notes": [], 
      "brief": "is any liveupdate data mounted and currently in use", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "resource.is_using_liveupdate_data"
    }
  ]
}