{
  "info": {
    "group": "SYSTEM", 
    "description": "Functions, core hooks, messages and constants for manipulation of\ngame objects. The \"go\" namespace is accessible from game object script\nfiles.", 
    "namespace": "go", 
    "brief": "Game object API documentation", 
    "file": "", 
    "path": "", 
    "name": "Game object"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "Post this message to a game object instance to make that instance acquire the user input focus.\nUser input is distributed by the engine to every instance that has\nrequested it. The last instance to request focus will receive it first.\nThis means that the scripts in the instance will have first-hand-chance\nat reacting on user input, possibly consuming it (by returning\n<code>true</code> from <code>on_input</code>) so that no other instances\ncan react on it. The most common case is for a script to send this message\nto itself when it needs to respond to user input.\nA script belonging to an instance which has the user input focus will\nreceive the input actions in its <code>on_input</code> callback function.\nSee <a href=\"#on_input\">on_input</a> for more information on how user input can be\nhandled.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "acquires the user input focus", 
      "examples": "This example demonstrates how to acquire and act on user input.\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- acquire input focus as soon as the instance has been initialized</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">acquire_input_focus&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">on_input</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">action_id</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check which input we received</span>\n    <span class=\"k\">if</span> <span class=\"n\">action_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_action&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- act on the input</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_action_amount</span> <span class=\"o\">=</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">value</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MESSAGE", 
      "name": "acquire_input_focus"
    }, 
    {
      "replaces": "", 
      "description": "Post this message to an instance to make that instance release the user input focus.\nSee <a href=\"#acquire_input_focus\">acquire_input_focus</a> for more information on how the user input handling\nworks.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "releases the user input focus", 
      "examples": "How to make a game object stop receiving input:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">release_input_focus&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MESSAGE", 
      "name": "release_input_focus"
    }, 
    {
      "replaces": "", 
      "description": "When this message is sent to an instance, it sets the parent of that instance. This means that the instance will exist\nin the geometrical space of its parent, like a basic transformation hierarchy or scene graph. If no parent is specified,\nthe instance will be detached from any parent and exist in world space. A script can send this message to itself to set\nthe parent of its instance.", 
      "parameters": [
        {
          "doc": "the id of the new parent", 
          "name": "parent_id", 
          "types": [
            "hash"
          ]
        }, 
        {
          "doc": "if the world transform of the instance should be preserved when changing spaces, 0 for false and 1 for true. The default value is 1.", 
          "name": "keep_world_transform", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the parent of the receiving instance", 
      "examples": "Attach myself to another instance \"my_parent\":\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">set_parent&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">parent_id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_parent&quot;</span><span class=\"p\">)})</span>\n</pre></div>\n\n\nAttach an instance \"my_instance\" to another instance \"my_parent\":\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_instance&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">set_parent&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">parent_id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_parent&quot;</span><span class=\"p\">)})</span>\n</pre></div>\n\n\nDetach an instance \"my_instance\" from its parent (if any):\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_instance&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">set_parent&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MESSAGE", 
      "name": "set_parent"
    }, 
    {
      "replaces": "", 
      "description": "This message enables the receiving component. All components are enabled by default, which means they will receive input, updates\nand be a part of the simulation. A component is disabled when it receives the <code>disable</code> message.\n<span class=\"icon-alert\"></span> Components that currently supports this message are:\n<ul>\n<li>Collection Proxy</li>\n<li>Collision Object</li>\n<li>Gui</li>\n<li>Label</li>\n<li>Spine Model</li>\n<li>Sprite</li>\n<li>Tile Grid</li>\n<li>Model</li>\n</ul>", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "enables the receiving component", 
      "examples": "Enable the component \"my_component\":\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#my_component&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">enable&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MESSAGE", 
      "name": "enable"
    }, 
    {
      "replaces": "", 
      "description": "This message disables the receiving component. All components are enabled by default, which means they will receive input, updates\nand be a part of the simulation. A component is disabled when it receives the <code>disable</code> message.\n<span class=\"icon-alert\"></span> Components that currently supports this message are:\n<ul>\n<li>Collection Proxy</li>\n<li>Collision Object</li>\n<li>Gui</li>\n<li>Label</li>\n<li>Spine Model</li>\n<li>Sprite</li>\n<li>Tile Grid</li>\n<li>Model</li>\n</ul>", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "disables the receiving component", 
      "examples": "Disable the component \"my_component\":\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#my_component&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">disable&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MESSAGE", 
      "name": "disable"
    }, 
    {
      "replaces": "", 
      "description": "The position of the game object.\nThe type of the property is vector3.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "<span class=\"type\">vector3</span> game object position", 
      "examples": "How to query a game object's position, either as a vector3 or selecting a specific dimension:\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- get position from &quot;player&quot;</span>\n  <span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">position&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">posx</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">position.x&quot;</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- do something useful</span>\n  <span class=\"nb\">assert</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">posx</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "PROPERTY", 
      "name": "position"
    }, 
    {
      "replaces": "", 
      "description": "The rotation of the game object.\nThe type of the property is quaternion.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "<span class=\"type\">quaternion</span> game object rotation", 
      "examples": "How to set a game object's rotation:\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- set &quot;player&quot; rotation to 45 degrees around z.</span>\n  <span class=\"kd\">local</span> <span class=\"n\">rotz</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">rotation&quot;</span><span class=\"p\">,</span> <span class=\"n\">rotz</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "PROPERTY", 
      "name": "rotation"
    }, 
    {
      "replaces": "", 
      "description": "The rotation of the game object expressed in Euler angles.\nEuler angles are specified in degrees in the interval (-360, 360).\nThe type of the property is vector3.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "<span class=\"type\">vector3</span> game object euler rotation", 
      "examples": "How to set a game object's rotation with euler angles, either as a vector3 or selecting a specific dimension:\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- set &quot;player&quot; euler z rotation component to 45 degrees around z.</span>\n  <span class=\"kd\">local</span> <span class=\"n\">rotz</span> <span class=\"o\">=</span> <span class=\"mi\">45</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">euler.z&quot;</span><span class=\"p\">,</span> <span class=\"n\">rotz</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">euler&quot;</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- do something useful</span>\n  <span class=\"nb\">assert</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">.</span><span class=\"n\">z</span> <span class=\"o\">==</span> <span class=\"n\">rotz</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "PROPERTY", 
      "name": "euler"
    }, 
    {
      "replaces": "", 
      "description": "The uniform scale of the game object. The type of the property is number.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "<span class=\"type\">number</span> game object scale", 
      "examples": "How to scale a game object:\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Double the scaling on &quot;player&quot;</span>\n  <span class=\"kd\">local</span> <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">scale&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">scale&quot;</span><span class=\"p\">,</span> <span class=\"n\">scale</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "PROPERTY", 
      "name": "scale"
    }, 
    {
      "replaces": "", 
      "description": "gets a named property of the specified game object or component", 
      "parameters": [
        {
          "doc": "url of the game object or component having the property", 
          "name": "url", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }, 
        {
          "doc": "id of the property to retrieve", 
          "name": "property", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the value of the specified property", 
          "name": "value", 
          "types": [
            "any"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets a named property of the specified game object or component", 
      "examples": "Get a property \"speed\" from a script \"player\", the property must be declared in the player-script:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">speed&quot;</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre></div>\n\n\nThen in the calling script (assumed to belong to the same game object, but does not have to):\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">speed</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">speed&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get"
    }, 
    {
      "replaces": "", 
      "description": "sets a named property of the specified game object or component, or a material constant", 
      "parameters": [
        {
          "doc": "url of the game object or component having the property", 
          "name": "url", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }, 
        {
          "doc": "id of the property to set", 
          "name": "property", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "the value to set", 
          "name": "value", 
          "types": [
            "any"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets a named property of the specified game object or component, or a material constant", 
      "examples": "Set a property \"speed\" of a script \"player\", the property must be declared in the player-script:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">speed&quot;</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre></div>\n\n\nThen in the calling script (assumed to belong to the same game object, but does not have to):\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">#player&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">speed&quot;</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.set"
    }, 
    {
      "replaces": "request_transform transform_response", 
      "description": "The position is relative the parent (if any). Use <a href=\"/ref/go#go.get_world_position\">go.get_world_position</a> to retrieve the global world position.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the position for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance position", 
          "name": "position", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the position of a game object instance", 
      "examples": "Get the position of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_position</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the position of another game object instance \"my_gameobject\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_position</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_gameobject&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_position"
    }, 
    {
      "replaces": "", 
      "description": "The rotation is relative to the parent (if any). Use <a href=\"/ref/go#go.get_world_rotation\">go.get_world_rotation</a> to retrieve the global world rotation.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the rotation for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance rotation", 
          "name": "rotation", 
          "types": [
            "quaternion"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the rotation of the game object instance", 
      "examples": "Get the rotation of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_rotation</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the rotation of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_rotation</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_rotation"
    }, 
    {
      "replaces": "", 
      "description": "The scale is relative the parent (if any). Use <a href=\"/ref/go#go.get_world_scale\">go.get_world_scale</a> to retrieve the global world 3D scale factor.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the scale for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance scale factor", 
          "name": "scale", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the 3D scale factor of the game object instance", 
      "examples": "Get the scale of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_scale</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the scale of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_scale</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_scale"
    }, 
    {
      "replaces": "", 
      "description": "The uniform scale is relative the parent (if any). If the underlying scale vector is non-uniform the min element of the vector is returned as the uniform scale factor.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the uniform scale for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "uniform instance scale factor", 
          "name": "scale", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the uniform scale factor of the game object instance", 
      "examples": "Get the scale of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_scale_uniform</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the uniform scale of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_scale_uniform</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_scale_uniform"
    }, 
    {
      "replaces": "", 
      "description": "The position is relative to the parent (if any). The global world position cannot be manually set.", 
      "parameters": [
        {
          "doc": "position to set", 
          "name": "position", 
          "types": [
            "vector3"
          ]
        }, 
        {
          "doc": "optional id of the game object instance to set the position for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the position of the game object instance", 
      "examples": "Set the position of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_position</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre></div>\n\n\nSet the position of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_position</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.set_position"
    }, 
    {
      "replaces": "", 
      "description": "The rotation is relative to the parent (if any). The global world rotation cannot be manually set.", 
      "parameters": [
        {
          "doc": "rotation to set", 
          "name": "rotation", 
          "types": [
            "quaternion"
          ]
        }, 
        {
          "doc": "optional id of the game object instance to get the rotation for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the rotation of the game object instance", 
      "examples": "Set the rotation of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_rotation</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n</pre></div>\n\n\nSet the rotation of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_rotation</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.set_rotation"
    }, 
    {
      "replaces": "", 
      "description": "The scale factor is relative to the parent (if any). The global world scale factor cannot be manually set.\n<span class=\"icon-attention\"></span> Physics are currently not affected when setting scale from this function.", 
      "parameters": [
        {
          "doc": "vector or uniform scale factor, must be greater than 0", 
          "name": "scale", 
          "types": [
            "number", 
            "vector3"
          ]
        }, 
        {
          "doc": "optional id of the game object instance to get the scale for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the scale factor of the game object instance", 
      "examples": "Set the scale of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_scale</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</pre></div>\n\n\nSet the scale of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_scale</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.set_scale"
    }, 
    {
      "replaces": "", 
      "description": "Sets the parent for a game object instance. This means that the instance will exist in the geometrical space of its parent,\nlike a basic transformation hierarchy or scene graph. If no parent is specified, the instance will be detached from any parent and exist in world\nspace.\nThis function will generate a <code>set_parent</code> message. It is not until the message has been processed that the change actually takes effect. This\ntypically happens later in the same frame or the beginning of the next frame. Refer to the manual to learn how messages are processed by the\nengine.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to set parent for, defaults to the instance containing the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }, 
        {
          "doc": "optional id of the new parent game object, defaults to detaching game object from its parent", 
          "name": "[parent_id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }, 
        {
          "doc": "optional boolean, set to true to maintain the world transform when changing spaces. Defaults to false.", 
          "name": "[keep_world_transform]", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "sets the parent for a specific game object instance", 
      "examples": "Attach myself to another instance \"my_parent\":\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_parent</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(),</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_parent&quot;</span><span class=\"p\">))</span>\n</pre></div>\n\n\nAttach an instance \"my_instance\" to another instance \"my_parent\":\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_parent</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_instance&quot;</span><span class=\"p\">),</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_parent&quot;</span><span class=\"p\">))</span>\n</pre></div>\n\n\nDetach an instance \"my_instance\" from its parent (if any):\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_parent</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_instance&quot;</span><span class=\"p\">))</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.set_parent"
    }, 
    {
      "replaces": "", 
      "description": "Get the parent for a game object instance.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get parent for, defaults to the instance containing the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "parent instance or nil", 
          "name": "parent_id", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get the parent for a specific game object instance", 
      "examples": "Get parent of the instance containing the calling script:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">parent_id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_parent</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet parent of the instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">parent_id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_parent</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_parent"
    }, 
    {
      "replaces": "", 
      "description": "Use <a href=\"/ref/go#go.get_position\">go.get_position</a> to retrieve the position relative to the parent.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the world position for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance world position", 
          "name": "position", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the game object instance world position", 
      "examples": "Get the world position of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_position</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the world position of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_position</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_world_position"
    }, 
    {
      "replaces": "", 
      "description": "Use <code>go.get_rotation</code> to retrieve the rotation relative to the parent.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the world rotation for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance world rotation", 
          "name": "rotation", 
          "types": [
            "quaternion"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the game object instance world rotation", 
      "examples": "Get the world rotation of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_rotation</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the world rotation of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_rotation</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_world_rotation"
    }, 
    {
      "replaces": "", 
      "description": "Use <code>go.get_scale</code> to retrieve the 3D scale factor relative to the parent.\nThis vector is derived by decomposing the transformation matrix and should be used with care.\nFor most cases it should be fine to use <a href=\"/ref/go#go.get_world_scale_uniform\">go.get_world_scale_uniform</a> instead.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the world scale for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance world 3D scale factor", 
          "name": "scale", 
          "types": [
            "vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the game object instance world 3D scale factor", 
      "examples": "Get the world 3D scale of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_scale</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the world scale of another game object instance \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_scale</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_world_scale"
    }, 
    {
      "replaces": "", 
      "description": "Use <code>go.get_scale_uniform</code> to retrieve the scale factor relative to the parent.", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the world scale for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance world scale factor", 
          "name": "scale", 
          "types": [
            "number"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the uniform game object instance world scale factor", 
      "examples": "Get the world scale of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_scale_uniform</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the world scale of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_scale_uniform</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_world_scale_uniform"
    }, 
    {
      "replaces": "", 
      "description": "gets the game object instance world transform matrix", 
      "parameters": [
        {
          "doc": "optional id of the game object instance to get the world transform for, by default the instance of the calling script", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance world transform", 
          "name": "transform", 
          "types": [
            "matrix4"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the game object instance world transform matrix", 
      "examples": "Get the world transform of the game object instance the script is attached to:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_transform</span><span class=\"p\">()</span>\n</pre></div>\n\n\nGet the world transform of another game object instance with id \"x\":\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_transform</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">x&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_world_transform"
    }, 
    {
      "replaces": "", 
      "description": "Returns or constructs an instance identifier. The instance id is a hash\nof the absolute path to the instance.\n<ul>\n<li>If <code>path</code> is specified, it can either be absolute or relative to the instance of the calling script.</li>\n<li>If <code>path</code> is not specified, the id of the game object instance the script is attached to will be returned.</li>\n</ul>", 
      "parameters": [
        {
          "doc": "path of the instance for which to return the id", 
          "name": "[path]", 
          "types": [
            "string"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "instance id", 
          "name": "id", 
          "types": [
            "hash"
          ]
        }
      ], 
      "notes": [], 
      "brief": "gets the id of an instance", 
      "examples": "For the instance with path <code>/my_sub_collection/my_instance</code>, the following calls are equivalent:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">()</span> <span class=\"c1\">-- no path, defaults to the instance containing the calling script</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; hash: [/my_sub_collection/my_instance]</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/my_sub_collection/my_instance&quot;</span><span class=\"p\">)</span> <span class=\"c1\">-- absolute path</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; hash: [/my_sub_collection/my_instance]</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_instance&quot;</span><span class=\"p\">)</span> <span class=\"c1\">-- relative path</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; hash: [/my_sub_collection/my_instance]</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.get_id"
    }, 
    {
      "replaces": "", 
      "description": "This is only supported for numerical properties. If the node property is already being\nanimated, that animation will be canceled and replaced by the new one.\nIf a <code>complete_function</code> (lua function) is specified, that function will be called when the animation has completed.\nBy starting a new animation in that function, several animations can be sequenced together. See the examples for more information.\n<span class=\"icon-attention\"></span> If you call <code>go.animate()</code> from a game object's <code>final()</code> function,\nany passed <code>complete_function</code> will be ignored and never called upon animation completion.\nSee the <a href=\"/manuals/properties\">properties guide</a> for which properties can be animated and the <a href=\"/manuals/animation\">animation guide</a> for how to animate them.", 
      "parameters": [
        {
          "doc": "url of the game object or component having the property", 
          "name": "url", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }, 
        {
          "doc": "id of the property to animate", 
          "name": "property", 
          "types": [
            "string", 
            "hash"
          ]
        }, 
        {
          "doc": "playback mode of the animation\n<ul>\n<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n<li><code>go.PLAYBACK_LOOP_FORWARD</code></li>\n<li><code>go.PLAYBACK_LOOP_BACKWARD</code></li>\n<li><code>go.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>", 
          "name": "playback", 
          "types": [
            "constant"
          ]
        }, 
        {
          "doc": "target property value", 
          "name": "to", 
          "types": [
            "number", 
            "vector3", 
            "vector4", 
            "quaternion"
          ]
        }, 
        {
          "doc": "easing to use during animation. Either specify a constant, see the <a href=\"/manuals/animation#_easing\">animation guide</a> for a complete list, or a vmath.vector with a curve", 
          "name": "easing", 
          "types": [
            "constant", 
            "vector"
          ]
        }, 
        {
          "doc": "duration of the animation in seconds", 
          "name": "duration", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "delay before the animation starts in seconds", 
          "name": "[delay]", 
          "types": [
            "number"
          ]
        }, 
        {
          "doc": "optional function to call when the animation has completed\n<dl>\n<dt><code>self</code></dt>\n<dd>\n<span class=\"type\">object</span> The current object.\n</dd>\n<dt><code>url</code></dt>\n<dd>\n<span class=\"type\">url</span> The game object or component instance for which the property is animated.\n</dd>\n<dt><code>property</code></dt>\n<dd>\n<span class=\"type\">hash</span> The id of the animated property.\n</dd>\n</dl>", 
          "name": "[complete_function]", 
          "types": [
            "function(self, url, property)"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "animates a named property of the specified game object or component", 
      "examples": "Animate the position of a game object to x = 10 during 1 second, then y = 20 during 1 second:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">x_done</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">property</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;</span><span class=\"s\">position.y&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_ONCE_FORWARD</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_LINEAR</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;</span><span class=\"s\">position.x&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_ONCE_FORWARD</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_LINEAR</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x_done</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\nAnimate the y position of a game object using a crazy custom easing curve:\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">local</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                 <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                 <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                 <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                 <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                 <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                 <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                 <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">go&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">position.y&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_LOOP_PINGPONG</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.animate"
    }, 
    {
      "replaces": "", 
      "description": "By calling this function, all stored animations of the given property will be canceled.\nSee the <a href=\"/manuals/properties\">properties guide</a> for which properties can be animated and the <a href=\"/manuals/animation\">animation guide</a> for how to animate them.", 
      "parameters": [
        {
          "doc": "url of the game object or component having the property", 
          "name": "url", 
          "types": [
            "string", 
            "hash", 
            "url"
          ]
        }, 
        {
          "doc": "ide of the property to animate", 
          "name": "property", 
          "types": [
            "string", 
            "hash"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "cancels all animations of the named property of the specified game object or component", 
      "examples": "Cancel the animation of the position of a game object:\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">cancel_animations</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;</span><span class=\"s\">position&quot;</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.cancel_animations"
    }, 
    {
      "replaces": "", 
      "description": "Delete one or more game objects identified by id. Deletion is asynchronous meaning that\nthe game object(s) are scheduled for deletion which will happen at the end of the current\nframe. Note that game objects scheduled for deletion will be counted against\n<code>max_instances</code> in \"game.project\" until they are actually removed.\n<span class=\"icon-attention\"></span> Deleting a game object containing a particle FX component emitting particles will not immediately stop the particle FX from emitting particles. You need to manually stop the particle FX using <code>particlefx.stop()</code>.\n<span class=\"icon-attention\"></span> Deleting a game object containing a sound component that is playing will not immediately stop the sound from playing. You need to manually stop the sound using <code>sound.stop()</code>.", 
      "parameters": [
        {
          "doc": "optional id or table of id's of the instance(s) to delete, the instance of the calling script is deleted by default", 
          "name": "[id]", 
          "types": [
            "string", 
            "hash", 
            "url", 
            "table"
          ]
        }, 
        {
          "doc": "optional boolean, set to true to recursively delete child hiearchy in child to parent order", 
          "name": "[recursive]", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "delete one or more game object instances", 
      "examples": "This example demonstrates how to delete game objects\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Delete the script game object</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"c1\">-- Delete a game object with the id &quot;my_game_object&quot;.</span>\n<span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_game_object&quot;</span><span class=\"p\">)</span> <span class=\"c1\">-- retrieve the id of the game object to be deleted</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"c1\">-- Delete a list of game objects.</span>\n<span class=\"kd\">local</span> <span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/my_object_1&quot;</span><span class=\"p\">),</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/my_object_2&quot;</span><span class=\"p\">),</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/my_object_3&quot;</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">)</span>\n</pre></div>\n\n\nThis example demonstrates how to delete a game objects and their children (child to parent order)\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Delete the script game object and it&#39;s children</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"c1\">-- Delete a game object with the id &quot;my_game_object&quot; and it&#39;s children.</span>\n<span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_game_object&quot;</span><span class=\"p\">)</span> <span class=\"c1\">-- retrieve the id of the game object to be deleted</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"c1\">-- Delete a list of game objects and their children.</span>\n<span class=\"kd\">local</span> <span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/my_object_1&quot;</span><span class=\"p\">),</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/my_object_2&quot;</span><span class=\"p\">),</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">/my_object_3&quot;</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.delete"
    }, 
    {
      "replaces": "", 
      "description": "This function defines a property which can then be used in the script through the self-reference.\nThe properties defined this way are automatically exposed in the editor in game objects and collections which use the script.\nNote that you can only use this function outside any callback-functions like init and update.", 
      "parameters": [
        {
          "doc": "the id of the property", 
          "name": "name", 
          "types": [
            "string"
          ]
        }, 
        {
          "doc": "default value of the property. In the case of a url, only the empty constructor msg.url() is allowed. In the case of a resource one of the resource constructors (eg resource.atlas(), resource.font() etc) is expected.", 
          "name": "value", 
          "types": [
            "number", 
            "hash", 
            "url", 
            "vector3", 
            "vector4", 
            "quaternion", 
            "resource"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "define a property for the script", 
      "examples": "This example demonstrates how to define a property called \"health\" in a script.\nThe health is decreased whenever someone sends a message called \"take_damage\" to the script.\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">health&quot;</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- prints 100 to the output</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">health</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">take_damage&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">health</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">health</span> <span class=\"o\">-</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">damage</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">Ouch! My health is now: &quot;</span> <span class=\"o\">..</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">health</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "go.property"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine when a script component is initialized. It can be used\nto set the initial state of the script.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called when a script component is initialized", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- set up useful data</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "init"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine when a script component is finalized (destroyed). It can\nbe used to e.g. take some last action, report the finalization to other game object instances, delete spawned objects\nor release user input focus (see <a href=\"#release_input_focus\">release_input_focus</a>).", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called when a script component is finalized", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">final</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- report finalization</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_friend_instance&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">im_dead&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">my_stats</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">some_value</span><span class=\"p\">})</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "final"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine every frame to update the state of a script component.\nIt can be used to perform any kind of game related tasks, e.g. moving the game object instance.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }, 
        {
          "doc": "the time-step of the frame update", 
          "name": "dt", 
          "types": [
            "number"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called every frame to update the script component", 
      "examples": "This example demonstrates how to move a game object instance through the script component:\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- set initial velocity to be 1 along world x-axis</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_velocity</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- move the game object instance</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_position</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_position</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">dt</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_velocity</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "update"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine whenever a message has been sent to the script component.\nIt can be used to take action on the message, e.g. send a response back to the sender of the message.\nThe <code>message</code> parameter is a table containing the message data. If the message is sent from the engine, the\ndocumentation of the message specifies which data is supplied.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }, 
        {
          "doc": "id of the received message", 
          "name": "message_id", 
          "types": [
            "hash"
          ]
        }, 
        {
          "doc": "a table containing the message data", 
          "name": "message", 
          "types": [
            "table"
          ]
        }, 
        {
          "doc": "address of the sender", 
          "name": "sender", 
          "types": [
            "url"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called when a message has been sent to the script component", 
      "examples": "This example demonstrates how a game object instance, called \"a\", can communicate with another instance, called \"b\". It\nis assumed that both script components of the instances has id \"script\".\nScript of instance \"a\":\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- let b know about some important data</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">b#script&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">my_data&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">important_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n\nScript of instance \"b\":\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- store the url of instance &quot;a&quot; for later use, by specifying nil as socket we</span>\n    <span class=\"c1\">-- automatically use our own socket</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">a_url</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">a&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"s\">script&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check message and sender</span>\n    <span class=\"k\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">my_data&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">sender</span> <span class=\"o\">==</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">a_url</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- use the data in some way</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">important_value</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">important_value</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "on_message"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine when user input is sent to the game object instance of the script.\nIt can be used to take action on the input, e.g. move the instance according to the input.\nFor an instance to obtain user input, it must first acquire input focus\nthrough the message <code>acquire_input_focus</code>.\nAny instance that has obtained input will be put on top of an\ninput stack. Input is sent to all listeners on the stack until the\nend of stack is reached, or a listener returns <code>true</code>\nto signal that it wants input to be consumed.\nSee the documentation of <a href=\"#acquire_input_focus\">acquire_input_focus</a> for more\ninformation.\nThe <code>action</code> parameter is a table containing data about the input mapped to the\n<code>action_id</code>.\nFor mapped actions it specifies the value of the input and if it was just pressed or released.\nActions are mapped to input in an input_binding-file.\nMouse movement is specifically handled and uses <code>nil</code> as its <code>action_id</code>.\nThe <code>action</code> only contains positional parameters in this case, such as x and y of the pointer.\nHere is a brief description of the available table fields:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>value</code></td>\n<td>The amount of input given by the user. This is usually 1 for buttons and 0-1 for analogue inputs. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>If the input was pressed this frame. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>released</code></td>\n<td>If the input was released this frame. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>repeated</code></td>\n<td>If the input was repeated this frame. This is similar to how a key on a keyboard is repeated when you hold it down. This is not present for mouse movement.</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>The x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>The y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_x</code></td>\n<td>The screen space x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_y</code></td>\n<td>The screen space y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>dx</code></td>\n<td>The change in x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>dy</code></td>\n<td>The change in y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_dx</code></td>\n<td>The change in screen space x value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>screen_dy</code></td>\n<td>The change in screen space y value of a pointer device, if present.</td>\n</tr>\n<tr>\n<td><code>gamepad</code></td>\n<td>The index of the gamepad device that provided the input.</td>\n</tr>\n<tr>\n<td><code>touch</code></td>\n<td>List of touch input, one element per finger, if present. See table below about touch input</td>\n</tr>\n</tbody>\n</table>\nTouch input table:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>id</code></td>\n<td>A number identifying the touch input during its duration.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>True if the finger was pressed this frame.</td>\n</tr>\n<tr>\n<td><code>released</code></td>\n<td>True if the finger was released this frame.</td>\n</tr>\n<tr>\n<td><code>tap_count</code></td>\n<td>Number of taps, one for single, two for double-tap, etc</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>The x touch location.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>The y touch location.</td>\n</tr>\n<tr>\n<td><code>dx</code></td>\n<td>The change in x value.</td>\n</tr>\n<tr>\n<td><code>dy</code></td>\n<td>The change in y value.</td>\n</tr>\n<tr>\n<td><code>acc_x</code></td>\n<td>Accelerometer x value (if present).</td>\n</tr>\n<tr>\n<td><code>acc_y</code></td>\n<td>Accelerometer y value (if present).</td>\n</tr>\n<tr>\n<td><code>acc_z</code></td>\n<td>Accelerometer z value (if present).</td>\n</tr>\n</tbody>\n</table>", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }, 
        {
          "doc": "id of the received input action, as mapped in the input_binding-file", 
          "name": "action_id", 
          "types": [
            "hash"
          ]
        }, 
        {
          "doc": "a table containing the input data, see above for a description", 
          "name": "action", 
          "types": [
            "table"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "optional boolean to signal if the input should be consumed (not passed on to others) or not, default is false", 
          "name": "[consume]", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "called when user input is received", 
      "examples": "This example demonstrates how a game object instance can be moved as a response to user input.\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- acquire input focus</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">acquire_input_focus&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- maximum speed the instance can be moved</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">max_speed</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"c1\">-- velocity of the instance, initially zero</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">()</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- move the instance</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_position</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_position</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">dt</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">on_input</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">action_id</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for movement input</span>\n    <span class=\"k\">if</span> <span class=\"n\">action_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">right&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">released</span> <span class=\"k\">then</span> <span class=\"c1\">-- reset velocity if input was released</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span> <span class=\"c1\">-- update velocity</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">max_speed</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "on_input"
    }, 
    {
      "replaces": "", 
      "description": "This is a callback-function, which is called by the engine when the script component is reloaded, e.g. from the editor.\nIt can be used for live development, e.g. to tweak constants or set up the state properly for the instance.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data", 
          "name": "self", 
          "types": [
            "object"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "called when the script component is reloaded", 
      "examples": "This example demonstrates how to tweak the speed of a game object instance that is moved on user input.\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- acquire input focus</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"s\">acquire_input_focus&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- maximum speed the instance can be moved, this value is tweaked in the on_reload function below</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">max_speed</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"c1\">-- velocity of the instance, initially zero</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">()</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- move the instance</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_position</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_position</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">dt</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">on_input</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">action_id</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for movement input</span>\n    <span class=\"k\">if</span> <span class=\"n\">action_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"s\">right&quot;</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">released</span> <span class=\"k\">then</span> <span class=\"c1\">-- reset velocity if input was released</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span> <span class=\"c1\">-- update velocity</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">max_speed</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">on_reload</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- edit this value and reload the script component</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">max_speed</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"k\">end</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "on_reload"
    }, 
    {
      "replaces": "", 
      "description": "no playback", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "no playback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.PLAYBACK_NONE"
    }, 
    {
      "replaces": "", 
      "description": "once forward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "once forward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.PLAYBACK_ONCE_FORWARD"
    }, 
    {
      "replaces": "", 
      "description": "once backward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "once backward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.PLAYBACK_ONCE_BACKWARD"
    }, 
    {
      "replaces": "", 
      "description": "once ping pong", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "once ping pong", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.PLAYBACK_ONCE_PINGPONG"
    }, 
    {
      "replaces": "", 
      "description": "loop forward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "loop forward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.PLAYBACK_LOOP_FORWARD"
    }, 
    {
      "replaces": "", 
      "description": "loop backward", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "loop backward", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.PLAYBACK_LOOP_BACKWARD"
    }, 
    {
      "replaces": "", 
      "description": "ping pong loop", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "ping pong loop", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.PLAYBACK_LOOP_PINGPONG"
    }, 
    {
      "replaces": "", 
      "description": "linear interpolation", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "linear interpolation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_LINEAR"
    }, 
    {
      "replaces": "", 
      "description": "in-quadratic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-quadratic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INQUAD"
    }, 
    {
      "replaces": "", 
      "description": "out-quadratic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-quadratic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTQUAD"
    }, 
    {
      "replaces": "", 
      "description": "in-out-quadratic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-quadratic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTQUAD"
    }, 
    {
      "replaces": "", 
      "description": "out-in-quadratic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-quadratic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINQUAD"
    }, 
    {
      "replaces": "", 
      "description": "in-cubic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-cubic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INCUBIC"
    }, 
    {
      "replaces": "", 
      "description": "out-cubic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-cubic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTCUBIC"
    }, 
    {
      "replaces": "", 
      "description": "in-out-cubic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-cubic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTCUBIC"
    }, 
    {
      "replaces": "", 
      "description": "out-in-cubic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-cubic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINCUBIC"
    }, 
    {
      "replaces": "", 
      "description": "in-quartic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-quartic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INQUART"
    }, 
    {
      "replaces": "", 
      "description": "out-quartic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-quartic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTQUART"
    }, 
    {
      "replaces": "", 
      "description": "in-out-quartic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-quartic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTQUART"
    }, 
    {
      "replaces": "", 
      "description": "out-in-quartic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-quartic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINQUART"
    }, 
    {
      "replaces": "", 
      "description": "in-quintic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-quintic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INQUINT"
    }, 
    {
      "replaces": "", 
      "description": "out-quintic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-quintic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTQUINT"
    }, 
    {
      "replaces": "", 
      "description": "in-out-quintic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-quintic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTQUINT"
    }, 
    {
      "replaces": "", 
      "description": "out-in-quintic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-quintic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINQUINT"
    }, 
    {
      "replaces": "", 
      "description": "in-sine", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-sine", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INSINE"
    }, 
    {
      "replaces": "", 
      "description": "out-sine", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-sine", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTSINE"
    }, 
    {
      "replaces": "", 
      "description": "in-out-sine", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-sine", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTSINE"
    }, 
    {
      "replaces": "", 
      "description": "out-in-sine", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-sine", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINSINE"
    }, 
    {
      "replaces": "", 
      "description": "in-exponential", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-exponential", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INEXPO"
    }, 
    {
      "replaces": "", 
      "description": "out-exponential", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-exponential", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTEXPO"
    }, 
    {
      "replaces": "", 
      "description": "in-out-exponential", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-exponential", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTEXPO"
    }, 
    {
      "replaces": "", 
      "description": "out-in-exponential", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-exponential", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINEXPO"
    }, 
    {
      "replaces": "", 
      "description": "in-circlic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-circlic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INCIRC"
    }, 
    {
      "replaces": "", 
      "description": "out-circlic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-circlic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTCIRC"
    }, 
    {
      "replaces": "", 
      "description": "in-out-circlic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-circlic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTCIRC"
    }, 
    {
      "replaces": "", 
      "description": "out-in-circlic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-circlic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINCIRC"
    }, 
    {
      "replaces": "", 
      "description": "in-elastic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-elastic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INELASTIC"
    }, 
    {
      "replaces": "", 
      "description": "out-elastic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-elastic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTELASTIC"
    }, 
    {
      "replaces": "", 
      "description": "in-out-elastic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-elastic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTELASTIC"
    }, 
    {
      "replaces": "", 
      "description": "out-in-elastic", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-elastic", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINELASTIC"
    }, 
    {
      "replaces": "", 
      "description": "in-back", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INBACK"
    }, 
    {
      "replaces": "", 
      "description": "out-back", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTBACK"
    }, 
    {
      "replaces": "", 
      "description": "in-out-back", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTBACK"
    }, 
    {
      "replaces": "", 
      "description": "out-in-back", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-back", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINBACK"
    }, 
    {
      "replaces": "", 
      "description": "in-bounce", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-bounce", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INBOUNCE"
    }, 
    {
      "replaces": "", 
      "description": "out-bounce", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-bounce", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTBOUNCE"
    }, 
    {
      "replaces": "", 
      "description": "in-out-bounce", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "in-out-bounce", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_INOUTBOUNCE"
    }, 
    {
      "replaces": "", 
      "description": "out-in-bounce", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "out-in-bounce", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "VARIABLE", 
      "name": "go.EASING_OUTINBOUNCE"
    }
  ]
}