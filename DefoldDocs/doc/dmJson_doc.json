{
  "info": {
    "group": "DEFOLD SDK", 
    "description": "API for platform independent parsing of json files", 
    "namespace": "dmJson", 
    "brief": "Json parsing functions", 
    "file": "dmsdk/dlib/json.h", 
    "path": "engine/dlib/src/dmsdk/dlib/json.h", 
    "name": "Json"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "Result enumeration.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "result enumeration", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmJson::RESULT_OK"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmJson::RESULT_SYNTAX_ERROR"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmJson::RESULT_INCOMPLETE"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmJson::RESULT_UNKNOWN"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "Result"
    }, 
    {
      "replaces": "", 
      "description": "Token type enumeration.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "token type enumeration", 
      "examples": "", 
      "members": [
        {
          "doc": "Number or boolean", 
          "type": "", 
          "name": "dmJson::TYPE_PRIMITIVE"
        }, 
        {
          "doc": "Json object", 
          "type": "", 
          "name": "dmJson::TYPE_OBJECT"
        }, 
        {
          "doc": "Json array", 
          "type": "", 
          "name": "dmJson::TYPE_ARRAY"
        }, 
        {
          "doc": "String", 
          "type": "", 
          "name": "dmJson::TYPE_STRING"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "Type"
    }, 
    {
      "replaces": "", 
      "description": "Nodes are in depth-first order with sibling\nlinks for simplified traversal.\nNOTE: Siblings were added to support a read-only\nlua-view of json-data. It's currently not used and\ncould potentially be removed for increased performance.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Json node representation.", 
      "examples": "", 
      "members": [
        {
          "doc": "Node type", 
          "type": "Type", 
          "name": "m_Type"
        }, 
        {
          "doc": "Start index inclusive into document json-data", 
          "type": "int", 
          "name": "m_Start"
        }, 
        {
          "doc": "End index exclusive into document json-data", 
          "type": "int", 
          "name": "m_End"
        }, 
        {
          "doc": "Size. Only applicable for arrays and objects", 
          "type": "int", 
          "name": "m_Size"
        }, 
        {
          "doc": "Sibling index. -1 if no sibling", 
          "type": "int", 
          "name": "m_Sibling"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "Node"
    }, 
    {
      "replaces": "", 
      "description": "Holds a full json document", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Json document", 
      "examples": "", 
      "members": [
        {
          "doc": "Array of nodes. First node is root", 
          "type": "Node*", 
          "name": "m_Nodes"
        }, 
        {
          "doc": "Total number of nodes", 
          "type": "int", 
          "name": "m_NodeCount"
        }, 
        {
          "doc": "Json-data (unescaped)", 
          "type": "char*", 
          "name": "m_Json"
        }, 
        {
          "doc": "User-data", 
          "type": "void*", 
          "name": "m_UserData"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "Document"
    }, 
    {
      "replaces": "", 
      "description": "Parses an (utf-8) string into a dmJson::Document\nThe document must later be freed with dmJson::Free()", 
      "parameters": [
        {
          "doc": "The input data (Utf-8)", 
          "name": "buffer", 
          "types": [
            "const char*"
          ]
        }, 
        {
          "doc": "The size of the json buffer (in bytes)", 
          "name": "length", 
          "types": [
            "uint32_t"
          ]
        }, 
        {
          "doc": "The output document", 
          "name": "document", 
          "types": [
            "Document*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "dmJson::RESULT_OK on success", 
          "name": "", 
          "types": [
            "Result"
          ]
        }
      ], 
      "notes": [], 
      "brief": "parse json data", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Parse"
    }, 
    {
      "replaces": "", 
      "description": "Parses a null terminated (utf-8) string into a dmJson::Document\nThe document must later be freed with dmJson::Free()", 
      "parameters": [
        {
          "doc": "The input data (Utf-8)", 
          "name": "buffer", 
          "types": [
            "const char*"
          ]
        }, 
        {
          "doc": "The output document", 
          "name": "document", 
          "types": [
            "Document*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "dmJson::RESULT_OK on success", 
          "name": "", 
          "types": [
            "Result"
          ]
        }
      ], 
      "notes": [], 
      "brief": "parse null terminated json data", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Parse"
    }, 
    {
      "replaces": "", 
      "description": "Deallocates a previously created dmJson::Document", 
      "parameters": [
        {
          "doc": "The document", 
          "name": "document", 
          "types": [
            "Document*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "", 
          "name": "", 
          "types": [
            "void"
          ]
        }
      ], 
      "notes": [], 
      "brief": "deallocates json document", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Free"
    }
  ]
}