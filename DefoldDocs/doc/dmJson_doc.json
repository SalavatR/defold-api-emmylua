{
  "elements": [
    {
      "type": "ENUM",
      "name": "Result",
      "brief": "result enumeration",
      "description": "Result enumeration.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "dmJson::RESULT_OK",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmJson::RESULT_SYNTAX_ERROR",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmJson::RESULT_INCOMPLETE",
          "doc": "",
          "type": ""
        },
        {
          "name": "dmJson::RESULT_UNKNOWN",
          "doc": "",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "ENUM",
      "name": "Type",
      "brief": "token type enumeration",
      "description": "Token type enumeration.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "dmJson::TYPE_PRIMITIVE",
          "doc": "Number or boolean",
          "type": ""
        },
        {
          "name": "dmJson::TYPE_OBJECT",
          "doc": "Json object",
          "type": ""
        },
        {
          "name": "dmJson::TYPE_ARRAY",
          "doc": "Json array",
          "type": ""
        },
        {
          "name": "dmJson::TYPE_STRING",
          "doc": "String",
          "type": ""
        }
      ],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "Node",
      "brief": "Json node representation.",
      "description": "Nodes are in depth-first order with sibling\nlinks for simplified traversal.\nNOTE: Siblings were added to support a read-only\nlua-view of json-data. It's currently not used and\ncould potentially be removed for increased performance.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_Type",
          "doc": "Node type",
          "type": "Type"
        },
        {
          "name": "m_Start",
          "doc": "Start index inclusive into document json-data",
          "type": "int"
        },
        {
          "name": "m_End",
          "doc": "End index exclusive into document json-data",
          "type": "int"
        },
        {
          "name": "m_Size",
          "doc": "Size. Only applicable for arrays and objects",
          "type": "int"
        },
        {
          "name": "m_Sibling",
          "doc": "Sibling index. -1 if no sibling",
          "type": "int"
        }
      ],
      "notes": []
    },
    {
      "type": "STRUCT",
      "name": "Document",
      "brief": "Json document",
      "description": "Holds a full json document",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "m_Nodes",
          "doc": "Array of nodes. First node is root",
          "type": "Node*"
        },
        {
          "name": "m_NodeCount",
          "doc": "Total number of nodes",
          "type": "int"
        },
        {
          "name": "m_Json",
          "doc": "Json-data (unescaped)",
          "type": "char*"
        },
        {
          "name": "m_UserData",
          "doc": "User-data",
          "type": "void*"
        }
      ],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Parse",
      "brief": "parse json data",
      "description": "Parses an (utf-8) string into a dmJson::Document\nThe document must later be freed with dmJson::Free()",
      "returnvalues": [
        {
          "name": "",
          "doc": "dmJson::RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "buffer",
          "doc": "The input data (Utf-8)",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "length",
          "doc": "The size of the json buffer (in bytes)",
          "types": [
            "uint32_t"
          ]
        },
        {
          "name": "document",
          "doc": "The output document",
          "types": [
            "Document*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Parse",
      "brief": "parse null terminated json data",
      "description": "Parses a null terminated (utf-8) string into a dmJson::Document\nThe document must later be freed with dmJson::Free()",
      "returnvalues": [
        {
          "name": "",
          "doc": "dmJson::RESULT_OK on success",
          "types": [
            "Result"
          ]
        }
      ],
      "parameters": [
        {
          "name": "buffer",
          "doc": "The input data (Utf-8)",
          "types": [
            "const char*"
          ]
        },
        {
          "name": "document",
          "doc": "The output document",
          "types": [
            "Document*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "Free",
      "brief": "deallocates json document",
      "description": "Deallocates a previously created dmJson::Document",
      "returnvalues": [
        {
          "name": "",
          "doc": "",
          "types": [
            "void"
          ]
        }
      ],
      "parameters": [
        {
          "name": "document",
          "doc": "The document",
          "types": [
            "Document*"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "dmJson",
    "name": "Json",
    "brief": "Json parsing functions",
    "description": "API for platform independent parsing of json files",
    "path": "engine/dlib/src/dmsdk/dlib/json.h",
    "file": "dmsdk/dlib/json.h",
    "group": "DEFOLD SDK"
  }
}