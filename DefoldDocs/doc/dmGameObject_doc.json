{
  "info": {
    "description": "<span class=\"file\">&lt;dmsdk/gameobject/component.h&gt;</span>\nApi for manipulating game object components (WIP)", 
    "namespace": "dmGameObject", 
    "brief": "SDK Component API documentation", 
    "file": "", 
    "path": "", 
    "name": "Component"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "Get component user data from a url.\nThe object referenced by the url must be in the same collection as the caller.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "index to argument (a url)", 
          "name": "index", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "the call will fail if the found component does not have the specified extension", 
          "name": "component_type", 
          "types": [
            "const char*"
          ]
        }, 
        {
          "doc": "The world associated owning the component. May be 0", 
          "name": "world", 
          "types": [
            "void**"
          ]
        }, 
        {
          "doc": "The component data associated with the url. May be 0", 
          "name": "component", 
          "types": [
            "void**"
          ]
        }, 
        {
          "doc": "The resolved url. May be 0", 
          "name": "url", 
          "types": [
            "dmMessage::URL*"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Get component user data from a url", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetComponentFromLua"
    }, 
    {
      "replaces": "", 
      "description": "Sends a script message. Wraps the message in a dmGameSystemDDF::ScriptMessage struct.", 
      "parameters": [
        {
          "doc": "The ddf message to send", 
          "name": "message", 
          "types": [
            "TDDFType*"
          ]
        }, 
        {
          "doc": "The sender", 
          "name": "sender", 
          "types": [
            "dmMessage::Message*"
          ]
        }, 
        {
          "doc": "The receiver", 
          "name": "receiver", 
          "types": [
            "dmMessage::Message*"
          ]
        }, 
        {
          "doc": "The function ref. 0 wil cause the \"on_message\" to be called", 
          "name": "function_ref", 
          "types": [
            "int"
          ]
        }, 
        {
          "doc": "call dmScript::UnrefInInstance on the function_ref after the dmScript::PCall is made", 
          "name": "unref_function_after_call", 
          "types": [
            "bool"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "true if successful", 
          "name": "success", 
          "types": [
            "bool"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Sends a script message", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::PostDDF"
    }, 
    {
      "replaces": "", 
      "description": "Value for an invalid instance index, this must be the same as defined in gamesys_ddf.proto for Create#index.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Value for an invalid instance index, this must be ...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "INVALID_INSTANCE_POOL_INDEX"
    }, 
    {
      "replaces": "", 
      "description": "Gameobject instance handle", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Gameobject instance handle", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "HInstance"
    }, 
    {
      "replaces": "", 
      "description": "Script handle", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Script handle", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "HScript"
    }, 
    {
      "replaces": "", 
      "description": "Script instance handle", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Script instance handle", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "HScriptInstance"
    }, 
    {
      "replaces": "", 
      "description": "Collection register.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Collection register.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "HRegister"
    }, 
    {
      "replaces": "", 
      "description": "Gameobject collection handle", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Gameobject collection handle", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "HCollection"
    }, 
    {
      "replaces": "", 
      "description": "Gameobject prototype handle", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Gameobject prototype handle", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "HPrototype"
    }, 
    {
      "replaces": "", 
      "description": "Gameobject properties handle", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Gameobject properties handle", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "HProperties"
    }, 
    {
      "replaces": "", 
      "description": "Result enumeration.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "result enumeration", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_OK"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_OUT_OF_RESOURCES"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_ALREADY_REGISTERED"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_IDENTIFIER_IN_USE"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_IDENTIFIER_ALREADY_SET"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_COMPONENT_NOT_FOUND"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_MAXIMUM_HIEARCHICAL_DEPTH"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_INVALID_OPERATION"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_RESOURCE_TYPE_NOT_FOUND"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_BUFFER_OVERFLOW"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::RESULT_UNKNOWN_ERROR"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "Result"
    }, 
    {
      "replaces": "", 
      "description": "Property types.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "property types", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_TYPE_NUMBER"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_TYPE_HASH"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_TYPE_URL"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_TYPE_VECTOR3"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_TYPE_VECTOR4"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_TYPE_QUAT"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_TYPE_BOOLEAN"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_TYPE_COUNT"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "PropertyType"
    }, 
    {
      "replaces": "", 
      "description": "Property result.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "property result", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_OK"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_NOT_FOUND"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_INVALID_FORMAT"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_UNSUPPORTED_TYPE"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_TYPE_MISMATCH"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_COMP_NOT_FOUND"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_INVALID_INSTANCE"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_BUFFER_OVERFLOW"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_UNSUPPORTED_VALUE"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_UNSUPPORTED_OPERATION"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_RESOURCE_NOT_FOUND"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_INVALID_INDEX"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROPERTY_RESULT_INVALID_KEY"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "PropertyResult"
    }, 
    {
      "replaces": "", 
      "description": "Playback type enum", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Playback type enum", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "Playback"
    }, 
    {
      "replaces": "", 
      "description": "Create result enum.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Create result enum", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::CREATE_RESULT_OK"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::CREATE_RESULT_UNKNOWN_ERROR"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "CreateResult"
    }, 
    {
      "replaces": "", 
      "description": "Update result enum.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Update result enum", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::UPDATE_RESULT_OK"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::UPDATE_RESULT_UNKNOWN_ERROR"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "UpdateResult"
    }, 
    {
      "replaces": "", 
      "description": "Type of property value", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Type of property value", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROP_VALUE_ARRAY"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::PROP_VALUE_HASHTABLE"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "PropertyValueType"
    }, 
    {
      "replaces": "", 
      "description": "Parameters variant that holds key or index for a propertys data structure.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Property Options", 
      "examples": "", 
      "members": [
        {
          "doc": "The index of the property to set, only applicable if property is array.", 
          "type": "int32_t", 
          "name": "m_Index"
        }, 
        {
          "doc": "The key of the property to set, only applicable if property is hashtable.", 
          "type": "dmhash_t", 
          "name": "m_Key"
        }, 
        {
          "doc": "A flag if structure contain m_Key value (it can't contain both)", 
          "type": "uint8_t", 
          "name": "m_HasKey"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "PropertyOptions"
    }, 
    {
      "replaces": "", 
      "description": "Property variant that holds the data for a variable", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "property variant", 
      "examples": "", 
      "members": [
        {
          "doc": "property type", 
          "type": "dmGameObject::PropertyType", 
          "name": "m_Type"
        }, 
        {
          "doc": "A floating point value (union)", 
          "type": "double", 
          "name": "m_Number"
        }, 
        {
          "doc": "A hash value (union)", 
          "type": "dmhash_t", 
          "name": "m_Hash"
        }, 
        {
          "doc": "An URL value (union)", 
          "type": "const uin8_t*", 
          "name": "m_Url"
        }, 
        {
          "doc": "A vector4 value (union)", 
          "type": "float", 
          "name": "m_V4"
        }, 
        {
          "doc": "A boolean value (union)", 
          "type": "bool", 
          "name": "m_Bool"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "PropertyVar"
    }, 
    {
      "replaces": "", 
      "description": "Description of a property.\nIf the property is externally mutable, m_ValuePtr points to the value and its length is m_ElementCount.\nm_Variant always reflects the value.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Description of a property", 
      "examples": "", 
      "members": [
        {
          "doc": "For composite properties (float arrays), these ids name each element", 
          "type": "dmhash_t", 
          "name": "m_ElementIds"
        }, 
        {
          "doc": "Variant holding the value", 
          "type": "PropertyVar", 
          "name": "m_Variant"
        }, 
        {
          "doc": "Pointer to the value, only set for mutable values. The actual data type is described by the variant.", 
          "type": "float*", 
          "name": "m_ValuePtr"
        }, 
        {
          "doc": "Determines whether we are permitted to write to this property.", 
          "type": "bool", 
          "name": "m_ReadOnly"
        }, 
        {
          "doc": "Indicates type of the property.", 
          "type": "uint8_t", 
          "name": "m_ValueType"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "PropertyDesc"
    }, 
    {
      "replaces": "", 
      "description": "Update context", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Update context", 
      "examples": "", 
      "members": [
        {
          "doc": "the scaling factor what was applied on the dt (i.e. the collection update time scale)", 
          "type": "float", 
          "name": "m_TimeScale"
        }, 
        {
          "doc": "the delta time elapsed since last frame (seconds)", 
          "type": "float", 
          "name": "m_DT"
        }, 
        {
          "doc": "Number of of calls per second to the FixedUpdate of each component", 
          "type": "uint32_t", 
          "name": "m_FixedUpdateFrequency"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "UpdateContext"
    }, 
    {
      "replaces": "", 
      "description": "Container of input related information.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Container of input related information.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "InputAction"
    }, 
    {
      "replaces": "", 
      "description": "Input result enum", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Input result enum", 
      "examples": "", 
      "members": [
        {
          "doc": "= 0", 
          "type": "", 
          "name": "INPUT_RESULT_IGNORED"
        }, 
        {
          "doc": "= 1", 
          "type": "", 
          "name": "INPUT_RESULT_CONSUMED"
        }, 
        {
          "doc": "= -1000", 
          "type": "", 
          "name": "INPUT_RESULT_UNKNOWN_ERROR"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "InputResult"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve the message socket for the specified collection.", 
      "parameters": [
        {
          "doc": "Collection handle", 
          "name": "collection", 
          "types": [
            "dmGameObject::HCollection"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The message socket of the specified collection", 
          "name": "socket", 
          "types": [
            "dmMessage::HSocket"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Retrieve the message socket for the specified coll...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetMessageSocket"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve a collection from the specified instance", 
      "parameters": [
        {
          "doc": "Game object instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The collection the specified instance belongs to", 
          "name": "collection", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Retrieve a collection from the specified instance", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetCollection"
    }, 
    {
      "replaces": "", 
      "description": "Create a new gameobject instance", 
      "parameters": [
        {
          "doc": "Gameobject collection", 
          "name": "collection", 
          "types": [
            "dmGameObject::HCollection"
          ]
        }, 
        {
          "doc": "|type: const char*] Prototype file name. May be 0.", 
          "name": "prototype_name", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "New gameobject instance. NULL if any error occured", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Create a new gameobject instance", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "New"
    }, 
    {
      "replaces": "", 
      "description": "Delete gameobject instance", 
      "parameters": [
        {
          "doc": "Gameobject collection", 
          "name": "collection", 
          "types": [
            "dmGameObject::HCollection"
          ]
        }, 
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }, 
        {
          "doc": "If true, delete child hierarchy recursively in child to parent order (leaf first)", 
          "name": "recursive", 
          "types": [
            "bool"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Delete gameobject instance", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "Delete"
    }, 
    {
      "replaces": "", 
      "description": "Construct a hash of an instance id based on the index provided.", 
      "parameters": [
        {
          "doc": "The index to base the id off of.", 
          "name": "index", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "hash of the instance id constructed.", 
          "name": "id", 
          "types": [
            "dmhash_t"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Construct a hash of an instance id based on the in...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ConstructInstanceId"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve an instance index from the index pool for the collection.", 
      "parameters": [
        {
          "doc": "Collection from which to retrieve the instance index.", 
          "name": "collection", 
          "types": [
            "dmGameObject::HColleciton"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "index from the index pool of collection.", 
          "name": "instance", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Retrieve an instance index from the index pool for...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "AcquireInstanceIndex"
    }, 
    {
      "replaces": "", 
      "description": "Assign an index to the instance, only if the instance is not null.", 
      "parameters": [
        {
          "doc": "The index to assign.", 
          "name": "index", 
          "types": [
            "uint32_t"
          ]
        }, 
        {
          "doc": "The instance that should be assigned the index.", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Assign an index to the instance, only if the insta...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "AssignInstanceIndex"
    }, 
    {
      "replaces": "", 
      "description": "Get instance identifier", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "Identifier. dmGameObject::UNNAMED_IDENTIFIER if not set.", 
          "name": "", 
          "types": [
            "dmhash_t"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Get instance identifier", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetIdentifier"
    }, 
    {
      "replaces": "", 
      "description": "Set instance identifier. Must be unique within the collection.", 
      "parameters": [
        {
          "doc": "Collection", 
          "name": "collection", 
          "types": [
            "dmGameObject::HCollection"
          ]
        }, 
        {
          "doc": "Instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }, 
        {
          "doc": "Identifier", 
          "name": "identifier", 
          "types": [
            "dmhash_t"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "RESULT_OK on success", 
          "name": "result", 
          "types": [
            "dmGameObject::Result"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Set instance identifier. Must be unique within the...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetIdentifier"
    }, 
    {
      "replaces": "", 
      "description": "Get component id from component index.", 
      "parameters": [
        {
          "doc": "Instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }, 
        {
          "doc": "Component index", 
          "name": "component_index", 
          "types": [
            "uint16_t"
          ]
        }, 
        {
          "doc": "[type: dmhash_t* Component id as out-argument", 
          "name": "component_id", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "RESULT_OK if the comopnent was found", 
          "name": "result", 
          "types": [
            "dmGameObject::Result"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Get component id from component index.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetComponentId"
    }, 
    {
      "replaces": "", 
      "description": "Set gameobject instance position", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }, 
        {
          "doc": "New Position", 
          "name": "position", 
          "types": [
            "dmGameObject::Point3"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set position", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetPosition"
    }, 
    {
      "replaces": "", 
      "description": "Get gameobject instance position", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "Position", 
          "name": "", 
          "types": [
            "dmGameObject::Point3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get position", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetPosition"
    }, 
    {
      "replaces": "", 
      "description": "Set gameobject instance rotation", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }, 
        {
          "doc": "New Position", 
          "name": "position", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set rotation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetRotation"
    }, 
    {
      "replaces": "", 
      "description": "Get gameobject instance rotation", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "rotation", 
          "name": "", 
          "types": [
            "dmGameObject::Quat"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get rotation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetRotation"
    }, 
    {
      "replaces": "", 
      "description": "Set gameobject instance uniform scale", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }, 
        {
          "doc": "New uniform scale", 
          "name": "scale", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set uniform scale", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetScale"
    }, 
    {
      "replaces": "", 
      "description": "Set gameobject instance non-uniform scale", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }, 
        {
          "doc": "New uniform scale", 
          "name": "scale", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set scale", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetScale"
    }, 
    {
      "replaces": "", 
      "description": "Get gameobject instance uniform scale", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "Uniform scale", 
          "name": "", 
          "types": [
            "float"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get uniform scale", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetUniformScale"
    }, 
    {
      "replaces": "", 
      "description": "Get gameobject instance scale", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "Non-uniform scale", 
          "name": "", 
          "types": [
            "dmGameObject::Vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get scale", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetScale"
    }, 
    {
      "replaces": "", 
      "description": "Get gameobject instance world position", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "World position", 
          "name": "", 
          "types": [
            "dmGameObject::Point3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get world position", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetWorldPosition"
    }, 
    {
      "replaces": "", 
      "description": "Get gameobject instance world rotation", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "World rotation", 
          "name": "", 
          "types": [
            "dmGameObject::Quat"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get world rotation", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetWorldRotation"
    }, 
    {
      "replaces": "", 
      "description": "Get game object instance world transform", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "World scale", 
          "name": "", 
          "types": [
            "dmGameObject::Vector3"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get world scale", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetWorldScale"
    }, 
    {
      "replaces": "", 
      "description": "Get game object instance uniform scale", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "World uniform scale", 
          "name": "", 
          "types": [
            "float"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get world uniform scale", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetWorldUniformScale"
    }, 
    {
      "replaces": "", 
      "description": "Get game object instance world transform as Matrix4.", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "World transform matrix.", 
          "name": "", 
          "types": [
            "dmGameObject::MAtrix4"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get world matrix", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetWorldMatrix"
    }, 
    {
      "replaces": "", 
      "description": "Get game object instance world transform", 
      "parameters": [
        {
          "doc": "Gameobject instance", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "World transform", 
          "name": "", 
          "types": [
            "dmTransform::Transform"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get world transform", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetWorldTransform"
    }, 
    {
      "replaces": "", 
      "description": "Set whether the instance should be flagged as a bone.\nInstances flagged as bones can have their transforms updated in a batch through SetBoneTransforms.\nUsed for animated skeletons.", 
      "parameters": [
        {
          "doc": "Instance", 
          "name": "instance", 
          "types": [
            "HImstance"
          ]
        }, 
        {
          "doc": "true if the instance is a bone", 
          "name": "bone", 
          "types": [
            "bool"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Set whether the instance should be flagged as a bo...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetBone"
    }, 
    {
      "replaces": "", 
      "description": "Check whether the instance is flagged as a bone.", 
      "parameters": [
        {
          "doc": "Instance", 
          "name": "instance", 
          "types": [
            "HImstance"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "True if flagged as a bone", 
          "name": "result", 
          "types": [
            "bool"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Check whether the instance is flagged as a bone.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "IsBone"
    }, 
    {
      "replaces": "", 
      "description": "Set the local transforms recursively of all instances flagged as bones, starting with component with id.\nThe order of the transforms is depth-first.", 
      "parameters": [
        {
          "doc": "First Instance of the hierarchy to set", 
          "name": "instance", 
          "types": [
            "HImstance"
          ]
        }, 
        {
          "doc": "the transform for component root", 
          "name": "component_transform", 
          "types": [
            "dmTransform::Transform"
          ]
        }, 
        {
          "doc": "Array of transforms to set depth-first for the bone instances", 
          "name": "transforms", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Size of the transforms array", 
          "name": "transform_count", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "of instances found", 
          "name": "Number", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Set the local transforms recursively of all instan...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "SetBoneTransforms"
    }, 
    {
      "replaces": "", 
      "description": "Recursively delete all instances flagged as bones under the given parent instance.\nThe order of deletion is depth-first, so that the children are deleted before the parents.", 
      "parameters": [
        {
          "doc": "Parent instance of the hierarchy", 
          "name": "parent", 
          "types": [
            "HInstance"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Recursively delete all instances flagged as bones ...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "DeleteBones"
    }, 
    {
      "replaces": "", 
      "description": "Opaque struct that holds info about the current node", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "scene graph traversal node", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "SceneNode"
    }, 
    {
      "replaces": "", 
      "description": "Opaque struct that holds info about the current position when traversing the scene", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "scene graph traversal iterator", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "SceneNodeIterator"
    }, 
    {
      "replaces": "", 
      "description": "Gets the top node of the whole game (the main collection)", 
      "parameters": [
        {
          "doc": "the full gameobject register", 
          "name": "regist", 
          "types": [
            "dmGameObject::HRegister"
          ]
        }, 
        {
          "doc": "the node to inspect", 
          "name": "node", 
          "types": [
            "dmGameObject::HRegister"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "True if successful", 
          "name": "result", 
          "types": [
            "bool"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Gets the top node of the whole game (the main coll...", 
      "examples": "The following examples show how to iterate over currently loaded scene graph\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">OutputNode</span><span class=\"p\">(</span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">SceneNode</span><span class=\"o\">*</span> <span class=\"n\">node</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">SceneNodeIterator</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">TraverseIterateChildren</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">TraverseIterateNext</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">OutputProperties</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">m_Node</span><span class=\"p\">);</span> <span class=\"c1\">// see dmGameObject::TraverseIterateProperties()</span>\n        <span class=\"n\">OutputNode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">m_Node</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">OutputScene</span><span class=\"p\">(</span><span class=\"n\">HRegister</span> <span class=\"n\">regist</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">SceneNode</span> <span class=\"n\">root</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">TraverseGetRoot</span><span class=\"p\">(</span><span class=\"n\">regist</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">root</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"n\">OutputNode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">node</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "TraverseGetRoot"
    }, 
    {
      "replaces": "", 
      "description": "Get a scene node iterator for the nodes' children", 
      "parameters": [
        {
          "doc": "the parent node", 
          "name": "node", 
          "types": [
            "dmGameObject::SceneNode*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the iterator", 
          "name": "iterator", 
          "types": [
            "dmGameObject::SceneNodeIterator"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Get a scene node iterator for the nodes' children", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "TraverseIterateChildren"
    }, 
    {
      "replaces": "", 
      "description": "Step a scene node iterator to the next sibling", 
      "parameters": [
        {
          "doc": "the iterator", 
          "name": "it", 
          "types": [
            "dmGameObject::SceneNodeIterator*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "true if successful. false if the iterator is finished", 
          "name": "result", 
          "types": [
            "bool"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Step a scene node iterator to the next sibling", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "TraverseIterateNext"
    }, 
    {
      "replaces": "", 
      "description": "scene node property types", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "scene node property types", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_NUMBER"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_HASH"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_URL"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_VECTOR3"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_VECTOR4"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_QUAT"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_BOOLEAN"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_TEXT"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_COUNT"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "SceneNodePropertyType"
    }, 
    {
      "replaces": "", 
      "description": "Struct that holds info about the current position when traversing the scene", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "scene traversal node property", 
      "examples": "", 
      "members": [
        {
          "doc": "name", 
          "type": "dmhash_t", 
          "name": "m_NameHash"
        }, 
        {
          "doc": "type", 
          "type": "dmGameObject::SceneNodePropertyType", 
          "name": "m_Type"
        }, 
        {
          "doc": "value\n<dl>\n<dt><code>m_Number</code></dt>\n<dd><span class=\"type\">double</span> floating point number</dd>\n<dt><code>m_Hash</code></dt>\n<dd><span class=\"type\">dmhash_t</span> The hashed value.</dd>\n<dt><code>m_URL</code></dt>\n<dd><span class=\"type\">char[1024</span>] The text representation of the url (if reverse hashes are enabled)</dd>\n<dt><code>m_V4</code></dt>\n<dd><span class=\"type\">float[4</span>] Used for Vector3, Vector4 and Quat</dd>\n<dt><code>m_Bool</code></dt>\n<dd><span class=\"type\">bool</span> A boolean value</dd>\n<dt><code>m_Text</code></dt>\n<dd><span class=\"type\">const char*</span> Text from a text property</dd>\n</dl>", 
          "type": "union", 
          "name": "m_Value"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "SceneNodeProperty"
    }, 
    {
      "replaces": "", 
      "description": "Holds the property", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "scene traversal node property", 
      "examples": "", 
      "members": [
        {
          "doc": "property", 
          "type": "dmGameObject::SceneNodeProperty", 
          "name": "m_Property"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "SceneNodePropertyIterator"
    }, 
    {
      "replaces": "", 
      "description": "Create a scene node traversal property iterator", 
      "parameters": [
        {
          "doc": "the node to inspect", 
          "name": "node", 
          "types": [
            "dmGameObject::SceneNode*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the property iterator", 
          "name": "iterator", 
          "types": [
            "dmGameObject::SceneNodePropertyIterator"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Create a scene node traversal property iterator", 
      "examples": "The following examples show how to iterate over the properties of a node\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">SceneNodePropertyIterator</span> <span class=\"n\">pit</span> <span class=\"o\">=</span> <span class=\"n\">TraverseIterateProperties</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">);</span>\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">TraverseIteratePropertiesNext</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">pit</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">dmHashReverseSafe64</span><span class=\"p\">(</span><span class=\"n\">pit</span><span class=\"p\">.</span><span class=\"n\">m_Property</span><span class=\"p\">.</span><span class=\"n\">m_NameHash</span><span class=\"p\">);</span>\n    <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">pit</span><span class=\"p\">.</span><span class=\"n\">m_Property</span><span class=\"p\">.</span><span class=\"n\">m_Type</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"nl\">SCENE_NODE_PROPERTY_TYPE_NUMBER</span><span class=\"p\">:</span> <span class=\"p\">...</span>\n    <span class=\"p\">...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "TraverseIterateProperties"
    }, 
    {
      "replaces": "", 
      "description": "Steps the scene node traversal property iterator to the next property", 
      "parameters": [
        {
          "doc": "the iterator", 
          "name": "it", 
          "types": [
            "dmGameObject::SceneNodePropertyIterator*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "True if the iterator it valid, false if the iterator is finished.", 
          "name": "finished", 
          "types": [
            "bool"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Steps the scene node traversal property iterator t...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "TraverseIteratePropertiesNext"
    }, 
    {
      "replaces": "", 
      "description": "Callback when iterating over the properties for a component.", 
      "parameters": [
        {
          "doc": "the property iterator", 
          "name": "pit", 
          "types": [
            "dmGameObject::SceneNodePropertyIterator"
          ]
        }, 
        {
          "doc": "the scene node", 
          "name": "node", 
          "types": [
            "dmGameObject::SceneNode*"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Callback when iterating over the properties for a ...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentIterProperties"
    }, 
    {
      "replaces": "", 
      "description": "Get the component type index. Used for with e.g. dmGameObject::GetWorld()/GetContext()", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The type index.", 
          "name": "type_index", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Get the component type index. Used for with e.g. d...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeGetTypeIndex"
    }, 
    {
      "replaces": "", 
      "description": "Set the new world callback. Called when a collection (i.e. a \"world\") is created.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentNewWorld"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the new world callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetNewWorldFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the world destroy callback. Called when a collection (i.e. a \"world\") is destroyed.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentDeleteWorld"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the world destroy callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetDeleteWorldFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component create callback. Called when a component instance is created.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentCreate"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component create callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetCreateFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component destroy callback. Called when a component instance is destroyed.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentDestroy"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component destroy callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetDestroyFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component init callback. Called on each gameobject's components, during a gameobject's initialization.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentInit"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component init callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetInitFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component finalize callback. Called on each gameobject's components, during a gameobject's finalization.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentFinal"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component finalize callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetFinalFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component add-to-update callback. Called for each component instal, when the game object is spawned.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentAddToUpdate"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component add-to-update callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetAddToUpdateFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component get callback. Called when the scripts want to retrieve the individual component user data given an url.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentGet"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component get callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetGetFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component render callback. Called when it's time to render all component instances.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentsRender"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component render callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetRenderFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component update callback. Called when it's time to update all component instances.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentsUpdate"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component update callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetUpdateFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component update callback. Called when it's time to update all component instances.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentsFixedUpdate"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component update callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetFixedUpdateFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component post update callback. Called for each collection after the update, before the render.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentsPostUpdate"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component post update callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetPostUpdateFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component on-message callback. Called multiple times per frame, to flush messages.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentOnMessage"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component on-message callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetOnMessageFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component on-input callback. Called once per frame, before the Update function.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentOnInput"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component on-input callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetOnInputFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component on-reload callback. Called when the resource of a component instance is reloaded.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentOnReload"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component on-reload callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetOnReloadFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component set properties callback. Called when the component instance is being spwned.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentSetProperties"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component set properties callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetSetPropertiesFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component get property callback. Called when accessing a property via <code>go.get()</code>", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentGetProperty"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component get property callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetGetPropertyFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component set property callback. Called when accessing a property via <code>go.set()</code>", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "callback", 
          "name": "fn", 
          "types": [
            "ComponentSetProperty"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component set property callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetSetPropertyFn"
    }, 
    {
      "replaces": "", 
      "description": "Set the component type global context. Usually set when registering the component type.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "component type global context", 
          "name": "context", 
          "types": [
            "void*"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component type global context", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetContext"
    }, 
    {
      "replaces": "", 
      "description": "get the component type global context", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "component type global context", 
          "name": "context", 
          "types": [
            "void*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get the component type global context", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeGetContext"
    }, 
    {
      "replaces": "", 
      "description": "Set the component type transform dependency flag.\nIf this flag is set, it might trigger an dmGameObject::UpdateTransforms() (if there are dirty transforms)", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "transform dependency flag", 
          "name": "reads_transforms", 
          "types": [
            "bool"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component type transform dependency flag", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetReadsTransforms"
    }, 
    {
      "replaces": "", 
      "description": "Set the component type prio order. Defines the update order of the component types.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "prio order", 
          "name": "prio", 
          "types": [
            "uint16_t"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component type prio order", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetPrio"
    }, 
    {
      "replaces": "", 
      "description": "Set the component type need for a per component instance user data. Defaults to true.", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "does each component instance need user data", 
          "name": "has_user_data", 
          "types": [
            "bool"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component type need for a per component instance user data", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetHasUserData"
    }, 
    {
      "replaces": "", 
      "description": "set the component child iterator function. Called during inspection", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "child iterator function", 
          "name": "fn", 
          "types": [
            "FIteratorChildren"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component child iterator function", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetChildIteratorFn"
    }, 
    {
      "replaces": "", 
      "description": "set the component property iterator function. Called during inspection", 
      "parameters": [
        {
          "doc": "the type", 
          "name": "type", 
          "types": [
            "ComponentType*"
          ]
        }, 
        {
          "doc": "property iterator function", 
          "name": "fn", 
          "types": [
            "FIteratorProperties"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "set the component property iterator function", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "ComponentTypeSetPropertyIteratorFn"
    }, 
    {
      "replaces": "", 
      "description": "Context used when registering a new component type", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Context used when registering a new component type", 
      "examples": "", 
      "members": [
        {
          "doc": "The config file", 
          "type": "dmConfigFile::HConfig", 
          "name": "m_Config"
        }, 
        {
          "doc": "The resource factory", 
          "type": "dmResource::HFactory", 
          "name": "m_Factory"
        }, 
        {
          "doc": "The game object registry", 
          "type": "dmGameObject::HRegister", 
          "name": "m_Register"
        }, 
        {
          "doc": "The shared script context", 
          "type": "dmScript::HContext", 
          "name": "m_Script"
        }, 
        {
          "doc": "Mappings between names and contextx", 
          "type": "dmHashTable64<void*>", 
          "name": "m_Contexts"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "ComponentTypeCreateCtx"
    }
  ]
}