{
  "info": {
    "group": "DEFOLD SDK", 
    "description": "Built-in scripting functions.", 
    "namespace": "dmScript", 
    "brief": "SDK Script API documentation", 
    "file": "dmsdk/script/script.h", 
    "path": "engine/dlib/src/dmsdk/script/script.h", 
    "name": "Script"
  }, 
  "elements": [
    {
      "replaces": "", 
      "description": "Get current game object instance\nWorks in both gameobjects and gui scripts", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "", 
          "name": "instance", 
          "types": [
            "dmGameObject::HInstance"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Get current game object instance\nWorks in both gam...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "CheckGOInstance"
    }, 
    {
      "replaces": "", 
      "description": "Get gameobject instance\nThe instance reference (url) at stack index \"index\" will be resolved to an instance.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "lua-arg", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "gameobject instance", 
          "name": "instance", 
          "types": [
            "lua_State*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Get gameobject instance\nThe instance reference (u...", 
      "examples": "How to get the position of a gameobject in a script extension\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">get_position</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">HInstance</span> <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CheckGOInstance</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Point3</span> <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">GetPosition</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span>\n    <span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">());</span>\n    <span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">());</span>\n    <span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "CheckGOInstance"
    }, 
    {
      "replaces": "", 
      "description": "Buffer ownership.\n - OWNER_C   - m_Buffer is owned by C side, should not be destroyed when GCed\n - OWNER_LUA - m_Buffer is owned by Lua side, will be destroyed when GCed\n - OWNER_RES - m_Buffer not used, has a reference to a buffer resource instead. m_BufferRes is owned by C side, will be released when GCed", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "buffer ownership", 
      "examples": "", 
      "members": [
        {
          "doc": "", 
          "type": "", 
          "name": "dmScript::OWNER_C"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmScript::OWNER_LUA"
        }, 
        {
          "doc": "", 
          "type": "", 
          "name": "dmScript::OWNER_RES"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "ENUM", 
      "name": "LuaBufferOwnership"
    }, 
    {
      "replaces": "", 
      "description": "Holds info about the buffer and who owns it.", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Lua wrapper for a dmBuffer::HBuffer", 
      "examples": "See examples for dmScript::PushBuffer()", 
      "members": [
        {
          "doc": "of\n    - m_BufferRes <span class=\"type\">void*</span>                       A buffer resource\n    - m_Buffer    <span class=\"type\">dmBuffer::HBuffer</span>           A buffer", 
          "type": "", 
          "name": "Union"
        }, 
        {
          "doc": "The buffer (or resource)", 
          "type": "dmBuffer::HBuffer", 
          "name": "m_Buffer"
        }, 
        {
          "doc": "What ownership the pointer has", 
          "type": "dmScript::LuaBufferOwnership", 
          "name": "m_Owner"
        }
      ], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "dmScript::LuaHBuffer"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value is a dmScript::LuaHBuffer", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "True if value at index is a LuaHBuffer", 
          "name": "boolean", 
          "types": [
            "boolean"
          ]
        }
      ], 
      "notes": [], 
      "brief": "check if the value is a dmScript::LuaHBuffer", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::IsBuffer"
    }, 
    {
      "replaces": "", 
      "description": "Will increase the stack by 1.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "buffer to push", 
          "name": "buffer", 
          "types": [
            "dmScript::LuaHBuffer"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "push a LuaHBuffer onto the supplied lua state", 
      "examples": "How to push a buffer and give Lua ownership of the buffer (GC)\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaHBuffer</span> <span class=\"n\">luabuf</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">OWNER_LUA</span><span class=\"p\">);</span>\n<span class=\"n\">PushBuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">luabuf</span><span class=\"p\">);</span>\n</pre></div>\n\n\nHow to push a buffer and keep ownership in C++\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaHBuffer</span> <span class=\"n\">luabuf</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">OWNER_C</span><span class=\"p\">);</span>\n<span class=\"n\">PushBuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">luabuf</span><span class=\"p\">);</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::PushBuffer"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value in the supplied index on the lua stack is a HBuffer and returns it.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "pointer to dmScript::LuaHBuffer", 
          "name": "buffer", 
          "types": [
            "LuaHBuffer*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "retrieve a HBuffer from the supplied lua state", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CheckBuffer"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve a HBuffer from the supplied lua state.\nCheck if the value in the supplied index on the lua stack is a HBuffer and returns it.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "pointer to dmScript::LuaHBuffer", 
          "name": "buffer", 
          "types": [
            "LuaHBuffer*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "retrieve a HBuffer from the supplied lua state.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CheckBufferNoError"
    }, 
    {
      "replaces": "", 
      "description": "The script context", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "The script context", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "TYPEDEF", 
      "name": "HContext"
    }, 
    {
      "replaces": "", 
      "description": "Diff is the expected difference of the stack size.\nIf luaL_error, or another function that executes a long-jump, is part of the executed code,\nthe stack guard cannot be guaranteed to execute at the end of the function.\nIn that case you should manually check the stack using <code>lua_gettop</code>.\nIn the case of luaL_error, see <a href=\"#DM_LUA_ERROR\">DM_LUA_ERROR</a>.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Number of expected items to be on the Lua stack once this struct goes out of scope", 
          "name": "diff", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "helper macro to validate the Lua stack state before leaving a function.", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">);</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MACRO", 
      "name": "DM_LUA_STACK_CHECK"
    }, 
    {
      "replaces": "", 
      "description": "This macro will verify that the Lua stack size hasn't been changed before\nthrowing a Lua error, which will long-jump out of the current function.\nThis macro can only be used together with <a href=\"#DM_LUA_STACK_CHECK\">DM_LUA_STACK_CHECK</a> and should\nbe prefered over manual checking of the stack.", 
      "parameters": [
        {
          "doc": "Format string that contains error information.", 
          "name": "fmt", 
          "types": [
            "const char*"
          ]
        }, 
        {
          "doc": "Format string args (variable arg list)", 
          "name": "args", 
          "types": [
            "..."
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "helper macro to validate the Lua stack state and throw a lua error.", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">ModuleFunc</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">some_error_check</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">DM_LUA_ERROR</span><span class=\"p\">(</span><span class=\"s\">&quot;some error message&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "MACRO", 
      "name": "DM_LUA_ERROR"
    }, 
    {
      "replaces": "", 
      "description": "Creates and returns a reference, in the table at index t, for the object at the\ntop of the stack (and pops the object).\nIt also tracks number of global references kept.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "table the lua table that stores the references. E.g LUA_REGISTRYINDEX", 
          "name": "table", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the new reference", 
          "name": "reference", 
          "types": [
            "int"
          ]
        }
      ], 
      "notes": [], 
      "brief": "wrapper for luaL_ref.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::Ref"
    }, 
    {
      "replaces": "", 
      "description": "Releases reference ref from the table at index t (see luaL_ref).\nThe entry is removed from the table, so that the referred object can be collected.\nIt also decreases the number of global references kept", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "table the lua table that stores the references. E.g LUA_REGISTRYINDEX", 
          "name": "table", 
          "types": [
            "int"
          ]
        }, 
        {
          "doc": "the reference to the object", 
          "name": "reference", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "wrapper for luaL_unref.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::Unref"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve current script instance from the global table and place it on the top of the stack, only valid when set.\n(see <a href=\"#dmScript::GetMainThread\">dmScript::GetMainThread</a>)", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Retrieve current script instance from the global t...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::GetInstance"
    }, 
    {
      "replaces": "", 
      "description": "Sets the current script instance\nSet the value on the top of the stack as the instance into the global table and pops it from the stack.\n(see <a href=\"#dmScript::GetMainThread\">dmScript::GetMainThread</a>)", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Sets the current script instance\nSet the value on ...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::SetInstance"
    }, 
    {
      "replaces": "", 
      "description": "Check if the script instance in the lua state is valid. The instance is assumed to have been previously set by <a href=\"#dmScript::SetInstance\">dmScript::SetInstance</a>.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "Returns true if the instance is valid", 
          "name": "boolean", 
          "types": [
            "bool"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Check if the script instance in the lua state is v...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::IsInstanceValid"
    }, 
    {
      "replaces": "", 
      "description": "Retrieve the main thread lua state from any lua state (main thread or coroutine).", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "the main thread lua state", 
          "name": "lua_State", 
          "types": [
            "lua_State*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Retrieve the main thread lua state from any lua st...", 
      "examples": "How to create a Lua callback\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span> <span class=\"n\">g_MyCallbackInfo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span> <span class=\"n\">cbk</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">IsCallbackValid</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n\n    <span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">GetCallbackLuaContext</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span>\n    <span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">SetupCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">dmLogError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to setup callback&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;Hello from extension!&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">76</span><span class=\"p\">);</span>\n\n    <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">PCall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// instance + 2</span>\n\n    <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">TeardownCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">Start</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"n\">g_MyCallbackInfo</span> <span class=\"o\">=</span> <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CreateCallback</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">Update</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">count</span><span class=\"o\">++</span> <span class=\"o\">==</span> <span class=\"mi\">5</span> <span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">)</span>\n            <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">DestroyCallback</span><span class=\"p\">(</span><span class=\"n\">g_MyCallbackInfo</span><span class=\"p\">);</span>\n        <span class=\"n\">g_MyCallbackInfo</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::GetMainThread"
    }, 
    {
      "replaces": "", 
      "description": "Get the value at index as a dmVMath::Vector3*", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The pointer to the value, or 0 if not correct type", 
          "name": "v", 
          "types": [
            "dmVMath::Vector3*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get the value at index as a dmVMath::Vector3*", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::ToVector3"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value at #index is a dmVMath::Vector3*", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "if value at #index is a dmVMath::Vector3*", 
          "name": "true", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Check if the value at #index is a dmVMath::Vector3...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::IsVector3"
    }, 
    {
      "replaces": "", 
      "description": "Push a dmVMath::Vector3 value onto the supplied lua state, will increase the stack by 1.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Vector3 value to push", 
          "name": "v", 
          "types": [
            "dmVMath::Vector3"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "push a dmVMath::Vector3 onto the Lua stack", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::PushVector3"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Vector3.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The pointer to the value", 
          "name": "vector3", 
          "types": [
            "dmVMath::Vector3*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "check if the value is a dmVMath::Vector3", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CheckVector3"
    }, 
    {
      "replaces": "", 
      "description": "Get the value at index as a dmVMath::Vector4*", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The pointer to the value, or 0 if not correct type", 
          "name": "v", 
          "types": [
            "dmVMath::Vector4*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get the value at index as a dmVMath::Vector4*", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::ToVector4"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value at #index is a dmVMath::Vector4*", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "if value at #index is a dmVMath::Vector4*", 
          "name": "true", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Check if the value at #index is a dmVMath::Vector4...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::IsVector4"
    }, 
    {
      "replaces": "", 
      "description": "Push a dmVMath::Vector4 value onto the supplied lua state, will increase the stack by 1.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "dmVMath::Vector4 value to push", 
          "name": "v", 
          "types": [
            "dmVMath::Vector4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "push a dmVMath::Vector4 on the stack", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::PushVector4"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Vector3.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The pointer to the value", 
          "name": "vector4", 
          "types": [
            "dmVMath::Vector4*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "check if the value is a dmVMath::Vector3", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CheckVector4"
    }, 
    {
      "replaces": "", 
      "description": "Get the value at index as a dmVMath::Quat*", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The pointer to the value, or 0 if not correct type", 
          "name": "quat", 
          "types": [
            "dmVMath::Quat*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get the value at index as a dmVMath::Quat*", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::ToQuat"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value at #index is a dmVMath::Quat*", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "if value at #index is a dmVMath::Quat*", 
          "name": "true", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Check if the value at #index is a dmVMath::Quat*", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::IsQuat"
    }, 
    {
      "replaces": "", 
      "description": "Push a quaternion value onto Lua stack. Will increase the stack by 1.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "dmVMath::Quat value to push", 
          "name": "quat", 
          "types": [
            "dmVMath::Quat"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "push a dmVMath::Quat onto the Lua stack", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::PushQuat"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Quat.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The pointer to the value", 
          "name": "quat", 
          "types": [
            "dmVMath::Quat*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "check if the value is a dmVMath::Vector3", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CheckQuat"
    }, 
    {
      "replaces": "", 
      "description": "Get the value at index as a dmVMath::Matrix4*", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The pointer to the value, or 0 if not correct type", 
          "name": "quat", 
          "types": [
            "dmVMath::Matrix4*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "get the value at index as a dmVMath::Matrix4*", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::ToMatrix4"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value at #index is a dmVMath::Matrix4*", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "if value at #index is a dmVMath::Matrix4*", 
          "name": "true", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Check if the value at #index is a dmVMath::Matrix4...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::IsMatrix4"
    }, 
    {
      "replaces": "", 
      "description": "Push a matrix4 value onto the Lua stack. Will increase the stack by 1.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "dmVMath::Matrix4 value to push", 
          "name": "matrix", 
          "types": [
            "dmVMath::Matrix4"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "push a dmVMath::Matrix4 onto the Lua stack", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::PushMatrix4"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value in the supplied index on the lua stack is a dmVMath::Matrix4.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "The pointer to the value", 
          "name": "matrix", 
          "types": [
            "dmVMath::Matrix4*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "check if the value is a dmVMath::Matrix4", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CheckMatrix4"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value at #index is a hash", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "if the value at #index is a hash", 
          "name": "true", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Check if the value at #index is a hash", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::IsHash"
    }, 
    {
      "replaces": "", 
      "description": "Push a hash value onto the supplied lua state, will increase the stack by 1.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "<span class=\"tyoe\"> dmhash_t</span> Hash value to push", 
          "name": "hash", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Push a hash value onto the supplied lua state, wil...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::PushHash"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value in the supplied index on the lua stack is a hash.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "hash value", 
          "name": "The", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "get hash value", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CheckHash"
    }, 
    {
      "replaces": "", 
      "description": "Check if the value in the supplied index on the lua stack is a hash or string.\nIf it is a string, it gets hashed on the fly", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "hash value", 
          "name": "The", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "get hash from hash or string", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CheckHashOrString"
    }, 
    {
      "replaces": "", 
      "description": "Gets as good as possible printable string from a hash or string", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "Index of the value", 
          "name": "index", 
          "types": [
            "int"
          ]
        }, 
        {
          "doc": "buffer receiving the value", 
          "name": "buffer", 
          "types": [
            "char*"
          ]
        }, 
        {
          "doc": "the buffer length", 
          "name": "buffer_length", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "Returns buffer. If buffer is non null, it will always contain a null terminated string. \"<unknown>\" if the hash could not be looked up.", 
          "name": "string", 
          "types": [
            "const char*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Gets as good as possible printable string from a h...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "GetStringFromHashOrString"
    }, 
    {
      "replaces": "", 
      "description": "Convert a dmJson::Document document to Lua table.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "JSON document", 
          "name": "doc", 
          "types": [
            "dmJson::Document"
          ]
        }, 
        {
          "doc": "index of JSON node", 
          "name": "index", 
          "types": [
            "int"
          ]
        }, 
        {
          "doc": "if an error is encountered, the error string is written to this argument", 
          "name": "error_str_out", 
          "types": [
            "char*"
          ]
        }, 
        {
          "doc": "size of error_str_out", 
          "name": "error_str_size", 
          "types": [
            "size_t"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "&lt;0 if it fails. &gt;=0 if it succeeds.", 
          "name": "int", 
          "types": [
            "int"
          ]
        }
      ], 
      "notes": [], 
      "brief": "convert a dmJson::Document to a Lua table", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmJson::Type"
    }, 
    {
      "replaces": "", 
      "description": "callback info struct that will hold the relevant info needed to make a callback into Lua", 
      "parameters": [], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "callback info struct", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "STRUCT", 
      "name": "dmScript::LuaCallbackInfo"
    }, 
    {
      "replaces": "", 
      "description": "Stores the current Lua state plus references to the script instance (self) and the callback.\nExpects SetInstance() to have been called prior to using this method.\nThe allocated data is created on the Lua stack and references are made against the\ninstances own context table.\nIf the callback is not explicitly deleted with DestroyCallback() the references and\ndata will stay around until the script instance is deleted.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "Lua stack index of the function", 
          "name": "index", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "callback struct if successful, 0 otherwise", 
          "name": "Lua", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Register a Lua callback.", 
      "examples": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">SomeFunction</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"c1\">// called from Lua</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span> <span class=\"n\">cbk</span> <span class=\"o\">=</span> <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CreateCallback</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"p\">...</span> <span class=\"n\">store</span> <span class=\"n\">the</span> <span class=\"n\">callback</span> <span class=\"k\">for</span> <span class=\"n\">later</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">InvokeCallback</span><span class=\"p\">(</span><span class=\"n\">LuaCallbackInfo</span><span class=\"o\">*</span> <span class=\"n\">cbk</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">GetCallbackLuaContext</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span>\n    <span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">SetupCallback</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;hello&quot;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">PCall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// self + # user arguments</span>\n\n    <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">TeardownCallback</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">);</span>\n    <span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">DestroyCallback</span><span class=\"p\">(</span><span class=\"n\">cbk</span><span class=\"p\">);</span> <span class=\"c1\">// only do this if you&#39;re not using the callback again</span>\n<span class=\"p\">}</span>\n</pre></div>", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::CreateCallback"
    }, 
    {
      "replaces": "", 
      "description": "Check if Lua callback is valid.", 
      "parameters": [
        {
          "doc": "Lua callback struct", 
          "name": "cbk", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Check if Lua callback is valid.", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::IsCallbackValid"
    }, 
    {
      "replaces": "", 
      "description": "Deletes the Lua callback", 
      "parameters": [
        {
          "doc": "Lua callback struct", 
          "name": "cbk", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Deletes the Lua callback", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::DestroyCallback"
    }, 
    {
      "replaces": "", 
      "description": "Gets the Lua context from a callback struct", 
      "parameters": [
        {
          "doc": "Lua callback struct", 
          "name": "cbk", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Gets the Lua context from a callback struct", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::GetCallbackLuaContext"
    }, 
    {
      "replaces": "", 
      "description": "The Lua stack after a successful call:\n<div class=\"codehilite\"><pre><span></span>   [-4] old instance\n   [-3] context table\n   [-2] callback\n   [-1] self\n</pre></div>\n\n\nIn the event of an unsuccessful call, the Lua stack is unchanged", 
      "parameters": [
        {
          "doc": "Lua callback struct", 
          "name": "cbk", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "if the setup was successful", 
          "name": "true", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "Setups up the Lua callback prior to a call to dmScript::PCall()", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::SetupCallback"
    }, 
    {
      "replaces": "", 
      "description": "Sets the previous instance\nExpects Lua stack:\n<div class=\"codehilite\"><pre><span></span>   [-2] old instance\n   [-1] context table\n</pre></div>\n\n\nBoth values are removed from the stack", 
      "parameters": [
        {
          "doc": "Lua callback struct", 
          "name": "cbk", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Cleans up the stack after SetupCallback+PCall calls", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::TeardownCallback"
    }, 
    {
      "replaces": "", 
      "description": "This function wraps lua_pcall with the addition of specifying an error handler which produces a backtrace.\nIn the case of an error, the error is logged and popped from the stack.", 
      "parameters": [
        {
          "doc": "lua state", 
          "name": "L", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "number of arguments", 
          "name": "nargs", 
          "types": [
            ""
          ]
        }, 
        {
          "doc": "number of results", 
          "name": "nresult", 
          "types": [
            ""
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "code from pcall", 
          "name": "error", 
          "types": [
            ""
          ]
        }
      ], 
      "notes": [], 
      "brief": "This function wraps lua_pcall with the addition of...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "dmScript::PCall"
    }, 
    {
      "replaces": "", 
      "description": "Creates a reference to the value at top of stack, the ref is done in the\ncurrent instances context table.\nExpects SetInstance() to have been set with an value that has a meta table\nwith META_GET_INSTANCE_CONTEXT_TABLE_REF method.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "ref to value or LUA_NOREF\nLua stack on entry\n [-1] value\nLua stack on exit", 
          "name": "lua", 
          "types": [
            "int"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Creates a reference to the value at top of stack, ...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "RefInInstance"
    }, 
    {
      "replaces": "", 
      "description": "Deletes the instance local lua reference\nExpects SetInstance() to have been set with an value that has a meta table\nwith META_GET_INSTANCE_CONTEXT_TABLE_REF method.", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "ref to value or LUA_NOREF\nLua stack on entry\nLua stack on exit", 
          "name": "ref", 
          "types": [
            "int"
          ]
        }
      ], 
      "returnvalues": [], 
      "notes": [], 
      "brief": "Deletes the instance local lua reference\nExpects ...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "UnrefInInstance"
    }, 
    {
      "replaces": "", 
      "description": "Resolves a url in string format into a dmMessage::URL struct.\nSpecial handling for:\n- \".\" returns the default socket + path\n- \"#\" returns default socket + path + fragment", 
      "parameters": [
        {
          "doc": "Lua state", 
          "name": "L", 
          "types": [
            "lua_State*"
          ]
        }, 
        {
          "doc": "url", 
          "name": "url", 
          "types": [
            "const char*"
          ]
        }, 
        {
          "doc": "where to store the result", 
          "name": "out_url", 
          "types": [
            "dmMessage::URL*"
          ]
        }, 
        {
          "doc": "default url", 
          "name": "default_url", 
          "types": [
            "dmMessage::URL*"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "dmMessage::RESULT_OK if the conversion succeeded", 
          "name": "result", 
          "types": [
            "dmMessage::Result"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Resolves a url in string format into a dmMessage::...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "RefInInstance"
    }, 
    {
      "replaces": "", 
      "description": "Converts a URL into a readable string. Useful for e.g. error messages", 
      "parameters": [
        {
          "doc": "url", 
          "name": "url", 
          "types": [
            "dmMessage::URL*"
          ]
        }, 
        {
          "doc": "the output buffer", 
          "name": "buffer", 
          "types": [
            "char*"
          ]
        }, 
        {
          "doc": "the output buffer size", 
          "name": "buffer_size", 
          "types": [
            "uint32_t"
          ]
        }
      ], 
      "returnvalues": [
        {
          "doc": "returns the passed in buffer", 
          "name": "buffer", 
          "types": [
            "const char*"
          ]
        }
      ], 
      "notes": [], 
      "brief": "Converts a URL into a readable string. Useful for ...", 
      "examples": "", 
      "members": [], 
      "error": "", 
      "tparams": [], 
      "type": "FUNCTION", 
      "name": "UrlToString"
    }
  ]
}